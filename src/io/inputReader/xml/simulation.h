// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SRC_IO_INPUT_READER_XMLREADER_XML_SIMULATION_H
#define SRC_IO_INPUT_READER_XMLREADER_XML_SIMULATION_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class vectorType;
class simulation;
class output;
class parameters;
class clusters;
class thermo;
class membraneArgs;
class parallelization;
class boundary;
class import_checkpoint;
class bin_profile;
class particle;
class disc;
class cuboid;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class vectorType: public ::xml_schema::type
{
  public:
  // x
  //
  typedef ::xml_schema::double_ x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char, ::xsd::cxx::tree::schema_type::double_ > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::double_ y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char, ::xsd::cxx::tree::schema_type::double_ > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // z
  //
  typedef ::xml_schema::double_ z_type;
  typedef ::xsd::cxx::tree::traits< z_type, char, ::xsd::cxx::tree::schema_type::double_ > z_traits;

  const z_type&
  z () const;

  z_type&
  z ();

  void
  z (const z_type& x);

  // Constructors.
  //
  vectorType (const x_type&,
              const y_type&,
              const z_type&);

  vectorType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  vectorType (const vectorType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual vectorType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  vectorType&
  operator= (const vectorType& x);

  virtual 
  ~vectorType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  ::xsd::cxx::tree::one< z_type > z_;
};

class simulation: public ::xml_schema::type
{
  public:
  // output
  //
  typedef ::output output_type;
  typedef ::xsd::cxx::tree::optional< output_type > output_optional;
  typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

  const output_optional&
  output () const;

  output_optional&
  output ();

  void
  output (const output_type& x);

  void
  output (const output_optional& x);

  void
  output (::std::unique_ptr< output_type > p);

  // parameters
  //
  typedef ::parameters parameters_type;
  typedef ::xsd::cxx::tree::optional< parameters_type > parameters_optional;
  typedef ::xsd::cxx::tree::traits< parameters_type, char > parameters_traits;

  const parameters_optional&
  parameters () const;

  parameters_optional&
  parameters ();

  void
  parameters (const parameters_type& x);

  void
  parameters (const parameters_optional& x);

  void
  parameters (::std::unique_ptr< parameters_type > p);

  // clusters
  //
  typedef ::clusters clusters_type;
  typedef ::xsd::cxx::tree::traits< clusters_type, char > clusters_traits;

  const clusters_type&
  clusters () const;

  clusters_type&
  clusters ();

  void
  clusters (const clusters_type& x);

  void
  clusters (::std::unique_ptr< clusters_type > p);

  // thermo
  //
  typedef ::thermo thermo_type;
  typedef ::xsd::cxx::tree::optional< thermo_type > thermo_optional;
  typedef ::xsd::cxx::tree::traits< thermo_type, char > thermo_traits;

  const thermo_optional&
  thermo () const;

  thermo_optional&
  thermo ();

  void
  thermo (const thermo_type& x);

  void
  thermo (const thermo_optional& x);

  void
  thermo (::std::unique_ptr< thermo_type > p);

  // membraneArgs
  //
  typedef ::membraneArgs membraneArgs_type;
  typedef ::xsd::cxx::tree::optional< membraneArgs_type > membraneArgs_optional;
  typedef ::xsd::cxx::tree::traits< membraneArgs_type, char > membraneArgs_traits;

  const membraneArgs_optional&
  membraneArgs () const;

  membraneArgs_optional&
  membraneArgs ();

  void
  membraneArgs (const membraneArgs_type& x);

  void
  membraneArgs (const membraneArgs_optional& x);

  void
  membraneArgs (::std::unique_ptr< membraneArgs_type > p);

  // parallelization
  //
  typedef ::parallelization parallelization_type;
  typedef ::xsd::cxx::tree::optional< parallelization_type > parallelization_optional;
  typedef ::xsd::cxx::tree::traits< parallelization_type, char > parallelization_traits;

  const parallelization_optional&
  parallelization () const;

  parallelization_optional&
  parallelization ();

  void
  parallelization (const parallelization_type& x);

  void
  parallelization (const parallelization_optional& x);

  void
  parallelization (::std::unique_ptr< parallelization_type > p);

  // Constructors.
  //
  simulation (const clusters_type&);

  simulation (::std::unique_ptr< clusters_type >);

  simulation (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  simulation (const simulation& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual simulation*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  simulation&
  operator= (const simulation& x);

  virtual 
  ~simulation ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  output_optional output_;
  parameters_optional parameters_;
  ::xsd::cxx::tree::one< clusters_type > clusters_;
  thermo_optional thermo_;
  membraneArgs_optional membraneArgs_;
  parallelization_optional parallelization_;
};

class output: public ::xml_schema::type
{
  public:
  // writeFrequency
  //
  typedef ::xml_schema::int_ writeFrequency_type;
  typedef ::xsd::cxx::tree::optional< writeFrequency_type > writeFrequency_optional;
  typedef ::xsd::cxx::tree::traits< writeFrequency_type, char > writeFrequency_traits;

  const writeFrequency_optional&
  writeFrequency () const;

  writeFrequency_optional&
  writeFrequency ();

  void
  writeFrequency (const writeFrequency_type& x);

  void
  writeFrequency (const writeFrequency_optional& x);

  // baseName
  //
  typedef ::xml_schema::string baseName_type;
  typedef ::xsd::cxx::tree::optional< baseName_type > baseName_optional;
  typedef ::xsd::cxx::tree::traits< baseName_type, char > baseName_traits;

  const baseName_optional&
  baseName () const;

  baseName_optional&
  baseName ();

  void
  baseName (const baseName_type& x);

  void
  baseName (const baseName_optional& x);

  void
  baseName (::std::unique_ptr< baseName_type > p);

  // create_checkpoint_file
  //
  typedef ::xml_schema::boolean create_checkpoint_file_type;
  typedef ::xsd::cxx::tree::optional< create_checkpoint_file_type > create_checkpoint_file_optional;
  typedef ::xsd::cxx::tree::traits< create_checkpoint_file_type, char > create_checkpoint_file_traits;

  const create_checkpoint_file_optional&
  create_checkpoint_file () const;

  create_checkpoint_file_optional&
  create_checkpoint_file ();

  void
  create_checkpoint_file (const create_checkpoint_file_type& x);

  void
  create_checkpoint_file (const create_checkpoint_file_optional& x);

  // Constructors.
  //
  output ();

  output (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  output (const output& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual output*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  output&
  operator= (const output& x);

  virtual 
  ~output ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  writeFrequency_optional writeFrequency_;
  baseName_optional baseName_;
  create_checkpoint_file_optional create_checkpoint_file_;
};

class parameters: public ::xml_schema::type
{
  public:
  // delta_t
  //
  typedef ::xml_schema::double_ delta_t_type;
  typedef ::xsd::cxx::tree::optional< delta_t_type > delta_t_optional;
  typedef ::xsd::cxx::tree::traits< delta_t_type, char, ::xsd::cxx::tree::schema_type::double_ > delta_t_traits;

  const delta_t_optional&
  delta_t () const;

  delta_t_optional&
  delta_t ();

  void
  delta_t (const delta_t_type& x);

  void
  delta_t (const delta_t_optional& x);

  // t_end
  //
  typedef ::xml_schema::double_ t_end_type;
  typedef ::xsd::cxx::tree::optional< t_end_type > t_end_optional;
  typedef ::xsd::cxx::tree::traits< t_end_type, char, ::xsd::cxx::tree::schema_type::double_ > t_end_traits;

  const t_end_optional&
  t_end () const;

  t_end_optional&
  t_end ();

  void
  t_end (const t_end_type& x);

  void
  t_end (const t_end_optional& x);

  // epsilon
  //
  typedef ::xml_schema::double_ epsilon_type;
  typedef ::xsd::cxx::tree::optional< epsilon_type > epsilon_optional;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::double_ > epsilon_traits;

  const epsilon_optional&
  epsilon () const;

  epsilon_optional&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  void
  epsilon (const epsilon_optional& x);

  // sigma
  //
  typedef ::xml_schema::double_ sigma_type;
  typedef ::xsd::cxx::tree::optional< sigma_type > sigma_optional;
  typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::double_ > sigma_traits;

  const sigma_optional&
  sigma () const;

  sigma_optional&
  sigma ();

  void
  sigma (const sigma_type& x);

  void
  sigma (const sigma_optional& x);

  // t_start
  //
  typedef ::xml_schema::double_ t_start_type;
  typedef ::xsd::cxx::tree::optional< t_start_type > t_start_optional;
  typedef ::xsd::cxx::tree::traits< t_start_type, char, ::xsd::cxx::tree::schema_type::double_ > t_start_traits;

  const t_start_optional&
  t_start () const;

  t_start_optional&
  t_start ();

  void
  t_start (const t_start_type& x);

  void
  t_start (const t_start_optional& x);

  // containerType
  //
  typedef ::xml_schema::string containerType_type;
  typedef ::xsd::cxx::tree::optional< containerType_type > containerType_optional;
  typedef ::xsd::cxx::tree::traits< containerType_type, char > containerType_traits;

  const containerType_optional&
  containerType () const;

  containerType_optional&
  containerType ();

  void
  containerType (const containerType_type& x);

  void
  containerType (const containerType_optional& x);

  void
  containerType (::std::unique_ptr< containerType_type > p);

  // domainSize
  //
  typedef ::vectorType domainSize_type;
  typedef ::xsd::cxx::tree::optional< domainSize_type > domainSize_optional;
  typedef ::xsd::cxx::tree::traits< domainSize_type, char > domainSize_traits;

  const domainSize_optional&
  domainSize () const;

  domainSize_optional&
  domainSize ();

  void
  domainSize (const domainSize_type& x);

  void
  domainSize (const domainSize_optional& x);

  void
  domainSize (::std::unique_ptr< domainSize_type > p);

  // cutoff
  //
  typedef ::xml_schema::double_ cutoff_type;
  typedef ::xsd::cxx::tree::optional< cutoff_type > cutoff_optional;
  typedef ::xsd::cxx::tree::traits< cutoff_type, char, ::xsd::cxx::tree::schema_type::double_ > cutoff_traits;

  const cutoff_optional&
  cutoff () const;

  cutoff_optional&
  cutoff ();

  void
  cutoff (const cutoff_type& x);

  void
  cutoff (const cutoff_optional& x);

  // boundary
  //
  typedef ::boundary boundary_type;
  typedef ::xsd::cxx::tree::optional< boundary_type > boundary_optional;
  typedef ::xsd::cxx::tree::traits< boundary_type, char > boundary_traits;

  const boundary_optional&
  boundary () const;

  boundary_optional&
  boundary ();

  void
  boundary (const boundary_type& x);

  void
  boundary (const boundary_optional& x);

  void
  boundary (::std::unique_ptr< boundary_type > p);

  // grav
  //
  typedef ::vectorType grav_type;
  typedef ::xsd::cxx::tree::optional< grav_type > grav_optional;
  typedef ::xsd::cxx::tree::traits< grav_type, char > grav_traits;

  const grav_optional&
  grav () const;

  grav_optional&
  grav ();

  void
  grav (const grav_type& x);

  void
  grav (const grav_optional& x);

  void
  grav (::std::unique_ptr< grav_type > p);

  // import_checkpoint
  //
  typedef ::import_checkpoint import_checkpoint_type;
  typedef ::xsd::cxx::tree::optional< import_checkpoint_type > import_checkpoint_optional;
  typedef ::xsd::cxx::tree::traits< import_checkpoint_type, char > import_checkpoint_traits;

  const import_checkpoint_optional&
  import_checkpoint () const;

  import_checkpoint_optional&
  import_checkpoint ();

  void
  import_checkpoint (const import_checkpoint_type& x);

  void
  import_checkpoint (const import_checkpoint_optional& x);

  void
  import_checkpoint (::std::unique_ptr< import_checkpoint_type > p);

  // bin_profile
  //
  typedef ::bin_profile bin_profile_type;
  typedef ::xsd::cxx::tree::optional< bin_profile_type > bin_profile_optional;
  typedef ::xsd::cxx::tree::traits< bin_profile_type, char > bin_profile_traits;

  const bin_profile_optional&
  bin_profile () const;

  bin_profile_optional&
  bin_profile ();

  void
  bin_profile (const bin_profile_type& x);

  void
  bin_profile (const bin_profile_optional& x);

  void
  bin_profile (::std::unique_ptr< bin_profile_type > p);

  // Constructors.
  //
  parameters ();

  parameters (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  parameters (const parameters& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual parameters*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  parameters&
  operator= (const parameters& x);

  virtual 
  ~parameters ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  delta_t_optional delta_t_;
  t_end_optional t_end_;
  epsilon_optional epsilon_;
  sigma_optional sigma_;
  t_start_optional t_start_;
  containerType_optional containerType_;
  domainSize_optional domainSize_;
  cutoff_optional cutoff_;
  boundary_optional boundary_;
  grav_optional grav_;
  import_checkpoint_optional import_checkpoint_;
  bin_profile_optional bin_profile_;
};

class clusters: public ::xml_schema::type
{
  public:
  // particle
  //
  typedef ::particle particle_type;
  typedef ::xsd::cxx::tree::sequence< particle_type > particle_sequence;
  typedef particle_sequence::iterator particle_iterator;
  typedef particle_sequence::const_iterator particle_const_iterator;
  typedef ::xsd::cxx::tree::traits< particle_type, char > particle_traits;

  const particle_sequence&
  particle () const;

  particle_sequence&
  particle ();

  void
  particle (const particle_sequence& s);

  // disc
  //
  typedef ::disc disc_type;
  typedef ::xsd::cxx::tree::sequence< disc_type > disc_sequence;
  typedef disc_sequence::iterator disc_iterator;
  typedef disc_sequence::const_iterator disc_const_iterator;
  typedef ::xsd::cxx::tree::traits< disc_type, char > disc_traits;

  const disc_sequence&
  disc () const;

  disc_sequence&
  disc ();

  void
  disc (const disc_sequence& s);

  // cuboid
  //
  typedef ::cuboid cuboid_type;
  typedef ::xsd::cxx::tree::sequence< cuboid_type > cuboid_sequence;
  typedef cuboid_sequence::iterator cuboid_iterator;
  typedef cuboid_sequence::const_iterator cuboid_const_iterator;
  typedef ::xsd::cxx::tree::traits< cuboid_type, char > cuboid_traits;

  const cuboid_sequence&
  cuboid () const;

  cuboid_sequence&
  cuboid ();

  void
  cuboid (const cuboid_sequence& s);

  // Constructors.
  //
  clusters ();

  clusters (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  clusters (const clusters& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual clusters*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  clusters&
  operator= (const clusters& x);

  virtual 
  ~clusters ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  particle_sequence particle_;
  disc_sequence disc_;
  cuboid_sequence cuboid_;
};

class thermo: public ::xml_schema::type
{
  public:
  // version
  //
  typedef ::xml_schema::int_ version_type;
  typedef ::xsd::cxx::tree::optional< version_type > version_optional;
  typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

  const version_optional&
  version () const;

  version_optional&
  version ();

  void
  version (const version_type& x);

  void
  version (const version_optional& x);

  // init_T
  //
  typedef ::xml_schema::double_ init_T_type;
  typedef ::xsd::cxx::tree::traits< init_T_type, char, ::xsd::cxx::tree::schema_type::double_ > init_T_traits;

  const init_T_type&
  init_T () const;

  init_T_type&
  init_T ();

  void
  init_T (const init_T_type& x);

  // n
  //
  typedef ::xml_schema::double_ n_type;
  typedef ::xsd::cxx::tree::traits< n_type, char, ::xsd::cxx::tree::schema_type::double_ > n_traits;

  const n_type&
  n () const;

  n_type&
  n ();

  void
  n (const n_type& x);

  // target
  //
  typedef ::xml_schema::double_ target_type;
  typedef ::xsd::cxx::tree::optional< target_type > target_optional;
  typedef ::xsd::cxx::tree::traits< target_type, char, ::xsd::cxx::tree::schema_type::double_ > target_traits;

  const target_optional&
  target () const;

  target_optional&
  target ();

  void
  target (const target_type& x);

  void
  target (const target_optional& x);

  // maxStep
  //
  typedef ::xml_schema::double_ maxStep_type;
  typedef ::xsd::cxx::tree::optional< maxStep_type > maxStep_optional;
  typedef ::xsd::cxx::tree::traits< maxStep_type, char, ::xsd::cxx::tree::schema_type::double_ > maxStep_traits;

  const maxStep_optional&
  maxStep () const;

  maxStep_optional&
  maxStep ();

  void
  maxStep (const maxStep_type& x);

  void
  maxStep (const maxStep_optional& x);

  // Constructors.
  //
  thermo (const init_T_type&,
          const n_type&);

  thermo (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  thermo (const thermo& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual thermo*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  thermo&
  operator= (const thermo& x);

  virtual 
  ~thermo ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  version_optional version_;
  ::xsd::cxx::tree::one< init_T_type > init_T_;
  ::xsd::cxx::tree::one< n_type > n_;
  target_optional target_;
  maxStep_optional maxStep_;
};

class membraneArgs: public ::xml_schema::type
{
  public:
  // r0
  //
  typedef ::xml_schema::double_ r0_type;
  typedef ::xsd::cxx::tree::traits< r0_type, char, ::xsd::cxx::tree::schema_type::double_ > r0_traits;

  const r0_type&
  r0 () const;

  r0_type&
  r0 ();

  void
  r0 (const r0_type& x);

  // k
  //
  typedef ::xml_schema::double_ k_type;
  typedef ::xsd::cxx::tree::traits< k_type, char, ::xsd::cxx::tree::schema_type::double_ > k_traits;

  const k_type&
  k () const;

  k_type&
  k ();

  void
  k (const k_type& x);

  // customForce
  //
  typedef ::vectorType customForce_type;
  typedef ::xsd::cxx::tree::traits< customForce_type, char > customForce_traits;

  const customForce_type&
  customForce () const;

  customForce_type&
  customForce ();

  void
  customForce (const customForce_type& x);

  void
  customForce (::std::unique_ptr< customForce_type > p);

  // Constructors.
  //
  membraneArgs (const r0_type&,
                const k_type&,
                const customForce_type&);

  membraneArgs (const r0_type&,
                const k_type&,
                ::std::unique_ptr< customForce_type >);

  membraneArgs (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  membraneArgs (const membraneArgs& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual membraneArgs*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  membraneArgs&
  operator= (const membraneArgs& x);

  virtual 
  ~membraneArgs ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< r0_type > r0_;
  ::xsd::cxx::tree::one< k_type > k_;
  ::xsd::cxx::tree::one< customForce_type > customForce_;
};

class parallelization: public ::xml_schema::type
{
  public:
  // strategy
  //
  typedef ::xml_schema::int_ strategy_type;
  typedef ::xsd::cxx::tree::traits< strategy_type, char > strategy_traits;

  const strategy_type&
  strategy () const;

  strategy_type&
  strategy ();

  void
  strategy (const strategy_type& x);

  // threadNumber
  //
  typedef ::xml_schema::int_ threadNumber_type;
  typedef ::xsd::cxx::tree::optional< threadNumber_type > threadNumber_optional;
  typedef ::xsd::cxx::tree::traits< threadNumber_type, char > threadNumber_traits;

  const threadNumber_optional&
  threadNumber () const;

  threadNumber_optional&
  threadNumber ();

  void
  threadNumber (const threadNumber_type& x);

  void
  threadNumber (const threadNumber_optional& x);

  // Constructors.
  //
  parallelization (const strategy_type&);

  parallelization (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  parallelization (const parallelization& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual parallelization*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  parallelization&
  operator= (const parallelization& x);

  virtual 
  ~parallelization ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< strategy_type > strategy_;
  threadNumber_optional threadNumber_;
};

class boundary: public ::xml_schema::type
{
  public:
  // xTop
  //
  typedef ::xml_schema::string xTop_type;
  typedef ::xsd::cxx::tree::traits< xTop_type, char > xTop_traits;

  const xTop_type&
  xTop () const;

  xTop_type&
  xTop ();

  void
  xTop (const xTop_type& x);

  void
  xTop (::std::unique_ptr< xTop_type > p);

  // xBottom
  //
  typedef ::xml_schema::string xBottom_type;
  typedef ::xsd::cxx::tree::traits< xBottom_type, char > xBottom_traits;

  const xBottom_type&
  xBottom () const;

  xBottom_type&
  xBottom ();

  void
  xBottom (const xBottom_type& x);

  void
  xBottom (::std::unique_ptr< xBottom_type > p);

  // yLeft
  //
  typedef ::xml_schema::string yLeft_type;
  typedef ::xsd::cxx::tree::traits< yLeft_type, char > yLeft_traits;

  const yLeft_type&
  yLeft () const;

  yLeft_type&
  yLeft ();

  void
  yLeft (const yLeft_type& x);

  void
  yLeft (::std::unique_ptr< yLeft_type > p);

  // yRight
  //
  typedef ::xml_schema::string yRight_type;
  typedef ::xsd::cxx::tree::traits< yRight_type, char > yRight_traits;

  const yRight_type&
  yRight () const;

  yRight_type&
  yRight ();

  void
  yRight (const yRight_type& x);

  void
  yRight (::std::unique_ptr< yRight_type > p);

  // zFront
  //
  typedef ::xml_schema::string zFront_type;
  typedef ::xsd::cxx::tree::traits< zFront_type, char > zFront_traits;

  const zFront_type&
  zFront () const;

  zFront_type&
  zFront ();

  void
  zFront (const zFront_type& x);

  void
  zFront (::std::unique_ptr< zFront_type > p);

  // zBehind
  //
  typedef ::xml_schema::string zBehind_type;
  typedef ::xsd::cxx::tree::traits< zBehind_type, char > zBehind_traits;

  const zBehind_type&
  zBehind () const;

  zBehind_type&
  zBehind ();

  void
  zBehind (const zBehind_type& x);

  void
  zBehind (::std::unique_ptr< zBehind_type > p);

  // Constructors.
  //
  boundary (const xTop_type&,
            const xBottom_type&,
            const yLeft_type&,
            const yRight_type&,
            const zFront_type&,
            const zBehind_type&);

  boundary (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  boundary (const boundary& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual boundary*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  boundary&
  operator= (const boundary& x);

  virtual 
  ~boundary ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< xTop_type > xTop_;
  ::xsd::cxx::tree::one< xBottom_type > xBottom_;
  ::xsd::cxx::tree::one< yLeft_type > yLeft_;
  ::xsd::cxx::tree::one< yRight_type > yRight_;
  ::xsd::cxx::tree::one< zFront_type > zFront_;
  ::xsd::cxx::tree::one< zBehind_type > zBehind_;
};

class import_checkpoint: public ::xml_schema::type
{
  public:
  // file_path
  //
  typedef ::xml_schema::string file_path_type;
  typedef ::xsd::cxx::tree::traits< file_path_type, char > file_path_traits;

  const file_path_type&
  file_path () const;

  file_path_type&
  file_path ();

  void
  file_path (const file_path_type& x);

  void
  file_path (::std::unique_ptr< file_path_type > p);

  // Constructors.
  //
  import_checkpoint (const file_path_type&);

  import_checkpoint (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  import_checkpoint (const import_checkpoint& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual import_checkpoint*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  import_checkpoint&
  operator= (const import_checkpoint& x);

  virtual 
  ~import_checkpoint ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< file_path_type > file_path_;
};

class bin_profile: public ::xml_schema::type
{
  public:
  // iteration
  //
  typedef ::xml_schema::int_ iteration_type;
  typedef ::xsd::cxx::tree::traits< iteration_type, char > iteration_traits;

  const iteration_type&
  iteration () const;

  iteration_type&
  iteration ();

  void
  iteration (const iteration_type& x);

  // bin_number
  //
  typedef ::xml_schema::int_ bin_number_type;
  typedef ::xsd::cxx::tree::optional< bin_number_type > bin_number_optional;
  typedef ::xsd::cxx::tree::traits< bin_number_type, char > bin_number_traits;

  const bin_number_optional&
  bin_number () const;

  bin_number_optional&
  bin_number ();

  void
  bin_number (const bin_number_type& x);

  void
  bin_number (const bin_number_optional& x);

  // base_name
  //
  typedef ::xml_schema::string base_name_type;
  typedef ::xsd::cxx::tree::optional< base_name_type > base_name_optional;
  typedef ::xsd::cxx::tree::traits< base_name_type, char > base_name_traits;

  const base_name_optional&
  base_name () const;

  base_name_optional&
  base_name ();

  void
  base_name (const base_name_type& x);

  void
  base_name (const base_name_optional& x);

  void
  base_name (::std::unique_ptr< base_name_type > p);

  // Constructors.
  //
  bin_profile (const iteration_type&);

  bin_profile (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  bin_profile (const bin_profile& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual bin_profile*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  bin_profile&
  operator= (const bin_profile& x);

  virtual 
  ~bin_profile ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< iteration_type > iteration_;
  bin_number_optional bin_number_;
  base_name_optional base_name_;
};

class particle: public ::xml_schema::type
{
  public:
  // coordinate
  //
  typedef ::vectorType coordinate_type;
  typedef ::xsd::cxx::tree::traits< coordinate_type, char > coordinate_traits;

  const coordinate_type&
  coordinate () const;

  coordinate_type&
  coordinate ();

  void
  coordinate (const coordinate_type& x);

  void
  coordinate (::std::unique_ptr< coordinate_type > p);

  // velocity
  //
  typedef ::vectorType velocity_type;
  typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

  const velocity_type&
  velocity () const;

  velocity_type&
  velocity ();

  void
  velocity (const velocity_type& x);

  void
  velocity (::std::unique_ptr< velocity_type > p);

  // mass
  //
  typedef ::xml_schema::double_ mass_type;
  typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

  const mass_type&
  mass () const;

  mass_type&
  mass ();

  void
  mass (const mass_type& x);

  // epsilon
  //
  typedef ::xml_schema::double_ epsilon_type;
  typedef ::xsd::cxx::tree::optional< epsilon_type > epsilon_optional;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::double_ > epsilon_traits;

  const epsilon_optional&
  epsilon () const;

  epsilon_optional&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  void
  epsilon (const epsilon_optional& x);

  // sigma
  //
  typedef ::xml_schema::double_ sigma_type;
  typedef ::xsd::cxx::tree::optional< sigma_type > sigma_optional;
  typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::double_ > sigma_traits;

  const sigma_optional&
  sigma () const;

  sigma_optional&
  sigma ();

  void
  sigma (const sigma_type& x);

  void
  sigma (const sigma_optional& x);

  // fixed
  //
  typedef ::xml_schema::boolean fixed_type;
  typedef ::xsd::cxx::tree::optional< fixed_type > fixed_optional;
  typedef ::xsd::cxx::tree::traits< fixed_type, char > fixed_traits;

  const fixed_optional&
  fixed () const;

  fixed_optional&
  fixed ();

  void
  fixed (const fixed_type& x);

  void
  fixed (const fixed_optional& x);

  // Constructors.
  //
  particle (const coordinate_type&,
            const velocity_type&,
            const mass_type&);

  particle (::std::unique_ptr< coordinate_type >,
            ::std::unique_ptr< velocity_type >,
            const mass_type&);

  particle (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  particle (const particle& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual particle*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  particle&
  operator= (const particle& x);

  virtual 
  ~particle ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< coordinate_type > coordinate_;
  ::xsd::cxx::tree::one< velocity_type > velocity_;
  ::xsd::cxx::tree::one< mass_type > mass_;
  epsilon_optional epsilon_;
  sigma_optional sigma_;
  fixed_optional fixed_;
};

class disc: public ::xml_schema::type
{
  public:
  // center
  //
  typedef ::vectorType center_type;
  typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

  const center_type&
  center () const;

  center_type&
  center ();

  void
  center (const center_type& x);

  void
  center (::std::unique_ptr< center_type > p);

  // velocity
  //
  typedef ::vectorType velocity_type;
  typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

  const velocity_type&
  velocity () const;

  velocity_type&
  velocity ();

  void
  velocity (const velocity_type& x);

  void
  velocity (::std::unique_ptr< velocity_type > p);

  // mass
  //
  typedef ::xml_schema::double_ mass_type;
  typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

  const mass_type&
  mass () const;

  mass_type&
  mass ();

  void
  mass (const mass_type& x);

  // meshWidth
  //
  typedef ::xml_schema::double_ meshWidth_type;
  typedef ::xsd::cxx::tree::traits< meshWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > meshWidth_traits;

  const meshWidth_type&
  meshWidth () const;

  meshWidth_type&
  meshWidth ();

  void
  meshWidth (const meshWidth_type& x);

  // radius
  //
  typedef ::xml_schema::double_ radius_type;
  typedef ::xsd::cxx::tree::traits< radius_type, char, ::xsd::cxx::tree::schema_type::double_ > radius_traits;

  const radius_type&
  radius () const;

  radius_type&
  radius ();

  void
  radius (const radius_type& x);

  // epsilon
  //
  typedef ::xml_schema::double_ epsilon_type;
  typedef ::xsd::cxx::tree::optional< epsilon_type > epsilon_optional;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::double_ > epsilon_traits;

  const epsilon_optional&
  epsilon () const;

  epsilon_optional&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  void
  epsilon (const epsilon_optional& x);

  // sigma
  //
  typedef ::xml_schema::double_ sigma_type;
  typedef ::xsd::cxx::tree::optional< sigma_type > sigma_optional;
  typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::double_ > sigma_traits;

  const sigma_optional&
  sigma () const;

  sigma_optional&
  sigma ();

  void
  sigma (const sigma_type& x);

  void
  sigma (const sigma_optional& x);

  // fixed
  //
  typedef ::xml_schema::boolean fixed_type;
  typedef ::xsd::cxx::tree::optional< fixed_type > fixed_optional;
  typedef ::xsd::cxx::tree::traits< fixed_type, char > fixed_traits;

  const fixed_optional&
  fixed () const;

  fixed_optional&
  fixed ();

  void
  fixed (const fixed_type& x);

  void
  fixed (const fixed_optional& x);

  // Constructors.
  //
  disc (const center_type&,
        const velocity_type&,
        const mass_type&,
        const meshWidth_type&,
        const radius_type&);

  disc (::std::unique_ptr< center_type >,
        ::std::unique_ptr< velocity_type >,
        const mass_type&,
        const meshWidth_type&,
        const radius_type&);

  disc (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  disc (const disc& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual disc*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  disc&
  operator= (const disc& x);

  virtual 
  ~disc ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< center_type > center_;
  ::xsd::cxx::tree::one< velocity_type > velocity_;
  ::xsd::cxx::tree::one< mass_type > mass_;
  ::xsd::cxx::tree::one< meshWidth_type > meshWidth_;
  ::xsd::cxx::tree::one< radius_type > radius_;
  epsilon_optional epsilon_;
  sigma_optional sigma_;
  fixed_optional fixed_;
};

class cuboid: public ::xml_schema::type
{
  public:
  // cornerCoordinates
  //
  typedef ::vectorType cornerCoordinates_type;
  typedef ::xsd::cxx::tree::traits< cornerCoordinates_type, char > cornerCoordinates_traits;

  const cornerCoordinates_type&
  cornerCoordinates () const;

  cornerCoordinates_type&
  cornerCoordinates ();

  void
  cornerCoordinates (const cornerCoordinates_type& x);

  void
  cornerCoordinates (::std::unique_ptr< cornerCoordinates_type > p);

  // dimensions
  //
  typedef ::vectorType dimensions_type;
  typedef ::xsd::cxx::tree::traits< dimensions_type, char > dimensions_traits;

  const dimensions_type&
  dimensions () const;

  dimensions_type&
  dimensions ();

  void
  dimensions (const dimensions_type& x);

  void
  dimensions (::std::unique_ptr< dimensions_type > p);

  // velocity
  //
  typedef ::vectorType velocity_type;
  typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

  const velocity_type&
  velocity () const;

  velocity_type&
  velocity ();

  void
  velocity (const velocity_type& x);

  void
  velocity (::std::unique_ptr< velocity_type > p);

  // meshWidth
  //
  typedef ::xml_schema::double_ meshWidth_type;
  typedef ::xsd::cxx::tree::traits< meshWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > meshWidth_traits;

  const meshWidth_type&
  meshWidth () const;

  meshWidth_type&
  meshWidth ();

  void
  meshWidth (const meshWidth_type& x);

  // mass
  //
  typedef ::xml_schema::double_ mass_type;
  typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

  const mass_type&
  mass () const;

  mass_type&
  mass ();

  void
  mass (const mass_type& x);

  // brownianMotion
  //
  typedef ::xml_schema::double_ brownianMotion_type;
  typedef ::xsd::cxx::tree::traits< brownianMotion_type, char, ::xsd::cxx::tree::schema_type::double_ > brownianMotion_traits;

  const brownianMotion_type&
  brownianMotion () const;

  brownianMotion_type&
  brownianMotion ();

  void
  brownianMotion (const brownianMotion_type& x);

  // epsilon
  //
  typedef ::xml_schema::double_ epsilon_type;
  typedef ::xsd::cxx::tree::optional< epsilon_type > epsilon_optional;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::double_ > epsilon_traits;

  const epsilon_optional&
  epsilon () const;

  epsilon_optional&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  void
  epsilon (const epsilon_optional& x);

  // sigma
  //
  typedef ::xml_schema::double_ sigma_type;
  typedef ::xsd::cxx::tree::optional< sigma_type > sigma_optional;
  typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::double_ > sigma_traits;

  const sigma_optional&
  sigma () const;

  sigma_optional&
  sigma ();

  void
  sigma (const sigma_type& x);

  void
  sigma (const sigma_optional& x);

  // special_coords
  //
  typedef ::vectorType special_coords_type;
  typedef ::xsd::cxx::tree::sequence< special_coords_type > special_coords_sequence;
  typedef special_coords_sequence::iterator special_coords_iterator;
  typedef special_coords_sequence::const_iterator special_coords_const_iterator;
  typedef ::xsd::cxx::tree::traits< special_coords_type, char > special_coords_traits;

  const special_coords_sequence&
  special_coords () const;

  special_coords_sequence&
  special_coords ();

  void
  special_coords (const special_coords_sequence& s);

  // fixed
  //
  typedef ::xml_schema::boolean fixed_type;
  typedef ::xsd::cxx::tree::optional< fixed_type > fixed_optional;
  typedef ::xsd::cxx::tree::traits< fixed_type, char > fixed_traits;

  const fixed_optional&
  fixed () const;

  fixed_optional&
  fixed ();

  void
  fixed (const fixed_type& x);

  void
  fixed (const fixed_optional& x);

  // Constructors.
  //
  cuboid (const cornerCoordinates_type&,
          const dimensions_type&,
          const velocity_type&,
          const meshWidth_type&,
          const mass_type&,
          const brownianMotion_type&);

  cuboid (::std::unique_ptr< cornerCoordinates_type >,
          ::std::unique_ptr< dimensions_type >,
          ::std::unique_ptr< velocity_type >,
          const meshWidth_type&,
          const mass_type&,
          const brownianMotion_type&);

  cuboid (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  cuboid (const cuboid& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual cuboid*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  cuboid&
  operator= (const cuboid& x);

  virtual 
  ~cuboid ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< cornerCoordinates_type > cornerCoordinates_;
  ::xsd::cxx::tree::one< dimensions_type > dimensions_;
  ::xsd::cxx::tree::one< velocity_type > velocity_;
  ::xsd::cxx::tree::one< meshWidth_type > meshWidth_;
  ::xsd::cxx::tree::one< mass_type > mass_;
  ::xsd::cxx::tree::one< brownianMotion_type > brownianMotion_;
  epsilon_optional epsilon_;
  sigma_optional sigma_;
  special_coords_sequence special_coords_;
  fixed_optional fixed_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::simulation >
simulation_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::simulation >
simulation_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const vectorType&);

// Serialize to std::ostream.
//

void
simulation_ (::std::ostream& os,
             const ::simulation& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
simulation_ (::std::ostream& os,
             const ::simulation& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
simulation_ (::std::ostream& os,
             const ::simulation& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
simulation_ (::xercesc::XMLFormatTarget& ft,
             const ::simulation& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
simulation_ (::xercesc::XMLFormatTarget& ft,
             const ::simulation& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
simulation_ (::xercesc::XMLFormatTarget& ft,
             const ::simulation& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
simulation_ (::xercesc::DOMDocument& d,
             const ::simulation& x,
             ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
simulation_ (const ::simulation& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const simulation&);

void
operator<< (::xercesc::DOMElement&, const output&);

void
operator<< (::xercesc::DOMElement&, const parameters&);

void
operator<< (::xercesc::DOMElement&, const clusters&);

void
operator<< (::xercesc::DOMElement&, const thermo&);

void
operator<< (::xercesc::DOMElement&, const membraneArgs&);

void
operator<< (::xercesc::DOMElement&, const parallelization&);

void
operator<< (::xercesc::DOMElement&, const boundary&);

void
operator<< (::xercesc::DOMElement&, const import_checkpoint&);

void
operator<< (::xercesc::DOMElement&, const bin_profile&);

void
operator<< (::xercesc::DOMElement&, const particle&);

void
operator<< (::xercesc::DOMElement&, const disc&);

void
operator<< (::xercesc::DOMElement&, const cuboid&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SRC_IO_INPUT_READER_XMLREADER_XML_SIMULATION_H
