// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simulation.h"

// vectorType
// 

const vectorType::x_type& vectorType::
x () const
{
  return this->x_.get ();
}

vectorType::x_type& vectorType::
x ()
{
  return this->x_.get ();
}

void vectorType::
x (const x_type& x)
{
  this->x_.set (x);
}

const vectorType::y_type& vectorType::
y () const
{
  return this->y_.get ();
}

vectorType::y_type& vectorType::
y ()
{
  return this->y_.get ();
}

void vectorType::
y (const y_type& x)
{
  this->y_.set (x);
}

const vectorType::z_type& vectorType::
z () const
{
  return this->z_.get ();
}

vectorType::z_type& vectorType::
z ()
{
  return this->z_.get ();
}

void vectorType::
z (const z_type& x)
{
  this->z_.set (x);
}


// simulation
// 

const simulation::output_optional& simulation::
output () const
{
  return this->output_;
}

simulation::output_optional& simulation::
output ()
{
  return this->output_;
}

void simulation::
output (const output_type& x)
{
  this->output_.set (x);
}

void simulation::
output (const output_optional& x)
{
  this->output_ = x;
}

void simulation::
output (::std::unique_ptr< output_type > x)
{
  this->output_.set (std::move (x));
}

const simulation::parameters_optional& simulation::
parameters () const
{
  return this->parameters_;
}

simulation::parameters_optional& simulation::
parameters ()
{
  return this->parameters_;
}

void simulation::
parameters (const parameters_type& x)
{
  this->parameters_.set (x);
}

void simulation::
parameters (const parameters_optional& x)
{
  this->parameters_ = x;
}

void simulation::
parameters (::std::unique_ptr< parameters_type > x)
{
  this->parameters_.set (std::move (x));
}

const simulation::clusters_type& simulation::
clusters () const
{
  return this->clusters_.get ();
}

simulation::clusters_type& simulation::
clusters ()
{
  return this->clusters_.get ();
}

void simulation::
clusters (const clusters_type& x)
{
  this->clusters_.set (x);
}

void simulation::
clusters (::std::unique_ptr< clusters_type > x)
{
  this->clusters_.set (std::move (x));
}

const simulation::thermo_optional& simulation::
thermo () const
{
  return this->thermo_;
}

simulation::thermo_optional& simulation::
thermo ()
{
  return this->thermo_;
}

void simulation::
thermo (const thermo_type& x)
{
  this->thermo_.set (x);
}

void simulation::
thermo (const thermo_optional& x)
{
  this->thermo_ = x;
}

void simulation::
thermo (::std::unique_ptr< thermo_type > x)
{
  this->thermo_.set (std::move (x));
}

const simulation::membraneArgs_optional& simulation::
membraneArgs () const
{
  return this->membraneArgs_;
}

simulation::membraneArgs_optional& simulation::
membraneArgs ()
{
  return this->membraneArgs_;
}

void simulation::
membraneArgs (const membraneArgs_type& x)
{
  this->membraneArgs_.set (x);
}

void simulation::
membraneArgs (const membraneArgs_optional& x)
{
  this->membraneArgs_ = x;
}

void simulation::
membraneArgs (::std::unique_ptr< membraneArgs_type > x)
{
  this->membraneArgs_.set (std::move (x));
}

const simulation::parallelization_optional& simulation::
parallelization () const
{
  return this->parallelization_;
}

simulation::parallelization_optional& simulation::
parallelization ()
{
  return this->parallelization_;
}

void simulation::
parallelization (const parallelization_type& x)
{
  this->parallelization_.set (x);
}

void simulation::
parallelization (const parallelization_optional& x)
{
  this->parallelization_ = x;
}

void simulation::
parallelization (::std::unique_ptr< parallelization_type > x)
{
  this->parallelization_.set (std::move (x));
}


// output
// 

const output::writeFrequency_optional& output::
writeFrequency () const
{
  return this->writeFrequency_;
}

output::writeFrequency_optional& output::
writeFrequency ()
{
  return this->writeFrequency_;
}

void output::
writeFrequency (const writeFrequency_type& x)
{
  this->writeFrequency_.set (x);
}

void output::
writeFrequency (const writeFrequency_optional& x)
{
  this->writeFrequency_ = x;
}

const output::baseName_optional& output::
baseName () const
{
  return this->baseName_;
}

output::baseName_optional& output::
baseName ()
{
  return this->baseName_;
}

void output::
baseName (const baseName_type& x)
{
  this->baseName_.set (x);
}

void output::
baseName (const baseName_optional& x)
{
  this->baseName_ = x;
}

void output::
baseName (::std::unique_ptr< baseName_type > x)
{
  this->baseName_.set (std::move (x));
}

const output::create_checkpoint_file_optional& output::
create_checkpoint_file () const
{
  return this->create_checkpoint_file_;
}

output::create_checkpoint_file_optional& output::
create_checkpoint_file ()
{
  return this->create_checkpoint_file_;
}

void output::
create_checkpoint_file (const create_checkpoint_file_type& x)
{
  this->create_checkpoint_file_.set (x);
}

void output::
create_checkpoint_file (const create_checkpoint_file_optional& x)
{
  this->create_checkpoint_file_ = x;
}


// parameters
// 

const parameters::delta_t_optional& parameters::
delta_t () const
{
  return this->delta_t_;
}

parameters::delta_t_optional& parameters::
delta_t ()
{
  return this->delta_t_;
}

void parameters::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

void parameters::
delta_t (const delta_t_optional& x)
{
  this->delta_t_ = x;
}

const parameters::t_end_optional& parameters::
t_end () const
{
  return this->t_end_;
}

parameters::t_end_optional& parameters::
t_end ()
{
  return this->t_end_;
}

void parameters::
t_end (const t_end_type& x)
{
  this->t_end_.set (x);
}

void parameters::
t_end (const t_end_optional& x)
{
  this->t_end_ = x;
}

const parameters::epsilon_optional& parameters::
epsilon () const
{
  return this->epsilon_;
}

parameters::epsilon_optional& parameters::
epsilon ()
{
  return this->epsilon_;
}

void parameters::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

void parameters::
epsilon (const epsilon_optional& x)
{
  this->epsilon_ = x;
}

const parameters::sigma_optional& parameters::
sigma () const
{
  return this->sigma_;
}

parameters::sigma_optional& parameters::
sigma ()
{
  return this->sigma_;
}

void parameters::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

void parameters::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}

const parameters::t_start_optional& parameters::
t_start () const
{
  return this->t_start_;
}

parameters::t_start_optional& parameters::
t_start ()
{
  return this->t_start_;
}

void parameters::
t_start (const t_start_type& x)
{
  this->t_start_.set (x);
}

void parameters::
t_start (const t_start_optional& x)
{
  this->t_start_ = x;
}

const parameters::averageVelocity_optional& parameters::
averageVelocity () const
{
  return this->averageVelocity_;
}

parameters::averageVelocity_optional& parameters::
averageVelocity ()
{
  return this->averageVelocity_;
}

void parameters::
averageVelocity (const averageVelocity_type& x)
{
  this->averageVelocity_.set (x);
}

void parameters::
averageVelocity (const averageVelocity_optional& x)
{
  this->averageVelocity_ = x;
}

const parameters::containerType_optional& parameters::
containerType () const
{
  return this->containerType_;
}

parameters::containerType_optional& parameters::
containerType ()
{
  return this->containerType_;
}

void parameters::
containerType (const containerType_type& x)
{
  this->containerType_.set (x);
}

void parameters::
containerType (const containerType_optional& x)
{
  this->containerType_ = x;
}

void parameters::
containerType (::std::unique_ptr< containerType_type > x)
{
  this->containerType_.set (std::move (x));
}

const parameters::domainSize_optional& parameters::
domainSize () const
{
  return this->domainSize_;
}

parameters::domainSize_optional& parameters::
domainSize ()
{
  return this->domainSize_;
}

void parameters::
domainSize (const domainSize_type& x)
{
  this->domainSize_.set (x);
}

void parameters::
domainSize (const domainSize_optional& x)
{
  this->domainSize_ = x;
}

void parameters::
domainSize (::std::unique_ptr< domainSize_type > x)
{
  this->domainSize_.set (std::move (x));
}

const parameters::cutoff_optional& parameters::
cutoff () const
{
  return this->cutoff_;
}

parameters::cutoff_optional& parameters::
cutoff ()
{
  return this->cutoff_;
}

void parameters::
cutoff (const cutoff_type& x)
{
  this->cutoff_.set (x);
}

void parameters::
cutoff (const cutoff_optional& x)
{
  this->cutoff_ = x;
}

const parameters::boundary_optional& parameters::
boundary () const
{
  return this->boundary_;
}

parameters::boundary_optional& parameters::
boundary ()
{
  return this->boundary_;
}

void parameters::
boundary (const boundary_type& x)
{
  this->boundary_.set (x);
}

void parameters::
boundary (const boundary_optional& x)
{
  this->boundary_ = x;
}

void parameters::
boundary (::std::unique_ptr< boundary_type > x)
{
  this->boundary_.set (std::move (x));
}

const parameters::grav_optional& parameters::
grav () const
{
  return this->grav_;
}

parameters::grav_optional& parameters::
grav ()
{
  return this->grav_;
}

void parameters::
grav (const grav_type& x)
{
  this->grav_.set (x);
}

void parameters::
grav (const grav_optional& x)
{
  this->grav_ = x;
}

void parameters::
grav (::std::unique_ptr< grav_type > x)
{
  this->grav_.set (std::move (x));
}

const parameters::import_checkpoint_optional& parameters::
import_checkpoint () const
{
  return this->import_checkpoint_;
}

parameters::import_checkpoint_optional& parameters::
import_checkpoint ()
{
  return this->import_checkpoint_;
}

void parameters::
import_checkpoint (const import_checkpoint_type& x)
{
  this->import_checkpoint_.set (x);
}

void parameters::
import_checkpoint (const import_checkpoint_optional& x)
{
  this->import_checkpoint_ = x;
}

void parameters::
import_checkpoint (::std::unique_ptr< import_checkpoint_type > x)
{
  this->import_checkpoint_.set (std::move (x));
}

const parameters::bin_profile_optional& parameters::
bin_profile () const
{
  return this->bin_profile_;
}

parameters::bin_profile_optional& parameters::
bin_profile ()
{
  return this->bin_profile_;
}

void parameters::
bin_profile (const bin_profile_type& x)
{
  this->bin_profile_.set (x);
}

void parameters::
bin_profile (const bin_profile_optional& x)
{
  this->bin_profile_ = x;
}

void parameters::
bin_profile (::std::unique_ptr< bin_profile_type > x)
{
  this->bin_profile_.set (std::move (x));
}


// clusters
// 

const clusters::particle_sequence& clusters::
particle () const
{
  return this->particle_;
}

clusters::particle_sequence& clusters::
particle ()
{
  return this->particle_;
}

void clusters::
particle (const particle_sequence& s)
{
  this->particle_ = s;
}

const clusters::disc_sequence& clusters::
disc () const
{
  return this->disc_;
}

clusters::disc_sequence& clusters::
disc ()
{
  return this->disc_;
}

void clusters::
disc (const disc_sequence& s)
{
  this->disc_ = s;
}

const clusters::cuboid_sequence& clusters::
cuboid () const
{
  return this->cuboid_;
}

clusters::cuboid_sequence& clusters::
cuboid ()
{
  return this->cuboid_;
}

void clusters::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}


// thermo
// 

const thermo::version_optional& thermo::
version () const
{
  return this->version_;
}

thermo::version_optional& thermo::
version ()
{
  return this->version_;
}

void thermo::
version (const version_type& x)
{
  this->version_.set (x);
}

void thermo::
version (const version_optional& x)
{
  this->version_ = x;
}

const thermo::init_T_type& thermo::
init_T () const
{
  return this->init_T_.get ();
}

thermo::init_T_type& thermo::
init_T ()
{
  return this->init_T_.get ();
}

void thermo::
init_T (const init_T_type& x)
{
  this->init_T_.set (x);
}

const thermo::n_type& thermo::
n () const
{
  return this->n_.get ();
}

thermo::n_type& thermo::
n ()
{
  return this->n_.get ();
}

void thermo::
n (const n_type& x)
{
  this->n_.set (x);
}

const thermo::target_optional& thermo::
target () const
{
  return this->target_;
}

thermo::target_optional& thermo::
target ()
{
  return this->target_;
}

void thermo::
target (const target_type& x)
{
  this->target_.set (x);
}

void thermo::
target (const target_optional& x)
{
  this->target_ = x;
}

const thermo::maxStep_optional& thermo::
maxStep () const
{
  return this->maxStep_;
}

thermo::maxStep_optional& thermo::
maxStep ()
{
  return this->maxStep_;
}

void thermo::
maxStep (const maxStep_type& x)
{
  this->maxStep_.set (x);
}

void thermo::
maxStep (const maxStep_optional& x)
{
  this->maxStep_ = x;
}


// membraneArgs
// 

const membraneArgs::r0_type& membraneArgs::
r0 () const
{
  return this->r0_.get ();
}

membraneArgs::r0_type& membraneArgs::
r0 ()
{
  return this->r0_.get ();
}

void membraneArgs::
r0 (const r0_type& x)
{
  this->r0_.set (x);
}

const membraneArgs::k_type& membraneArgs::
k () const
{
  return this->k_.get ();
}

membraneArgs::k_type& membraneArgs::
k ()
{
  return this->k_.get ();
}

void membraneArgs::
k (const k_type& x)
{
  this->k_.set (x);
}

const membraneArgs::customForce_type& membraneArgs::
customForce () const
{
  return this->customForce_.get ();
}

membraneArgs::customForce_type& membraneArgs::
customForce ()
{
  return this->customForce_.get ();
}

void membraneArgs::
customForce (const customForce_type& x)
{
  this->customForce_.set (x);
}

void membraneArgs::
customForce (::std::unique_ptr< customForce_type > x)
{
  this->customForce_.set (std::move (x));
}


// parallelization
// 

const parallelization::strategy_type& parallelization::
strategy () const
{
  return this->strategy_.get ();
}

parallelization::strategy_type& parallelization::
strategy ()
{
  return this->strategy_.get ();
}

void parallelization::
strategy (const strategy_type& x)
{
  this->strategy_.set (x);
}

const parallelization::threadNumber_optional& parallelization::
threadNumber () const
{
  return this->threadNumber_;
}

parallelization::threadNumber_optional& parallelization::
threadNumber ()
{
  return this->threadNumber_;
}

void parallelization::
threadNumber (const threadNumber_type& x)
{
  this->threadNumber_.set (x);
}

void parallelization::
threadNumber (const threadNumber_optional& x)
{
  this->threadNumber_ = x;
}


// boundary
// 

const boundary::xTop_type& boundary::
xTop () const
{
  return this->xTop_.get ();
}

boundary::xTop_type& boundary::
xTop ()
{
  return this->xTop_.get ();
}

void boundary::
xTop (const xTop_type& x)
{
  this->xTop_.set (x);
}

void boundary::
xTop (::std::unique_ptr< xTop_type > x)
{
  this->xTop_.set (std::move (x));
}

const boundary::xBottom_type& boundary::
xBottom () const
{
  return this->xBottom_.get ();
}

boundary::xBottom_type& boundary::
xBottom ()
{
  return this->xBottom_.get ();
}

void boundary::
xBottom (const xBottom_type& x)
{
  this->xBottom_.set (x);
}

void boundary::
xBottom (::std::unique_ptr< xBottom_type > x)
{
  this->xBottom_.set (std::move (x));
}

const boundary::yLeft_type& boundary::
yLeft () const
{
  return this->yLeft_.get ();
}

boundary::yLeft_type& boundary::
yLeft ()
{
  return this->yLeft_.get ();
}

void boundary::
yLeft (const yLeft_type& x)
{
  this->yLeft_.set (x);
}

void boundary::
yLeft (::std::unique_ptr< yLeft_type > x)
{
  this->yLeft_.set (std::move (x));
}

const boundary::yRight_type& boundary::
yRight () const
{
  return this->yRight_.get ();
}

boundary::yRight_type& boundary::
yRight ()
{
  return this->yRight_.get ();
}

void boundary::
yRight (const yRight_type& x)
{
  this->yRight_.set (x);
}

void boundary::
yRight (::std::unique_ptr< yRight_type > x)
{
  this->yRight_.set (std::move (x));
}

const boundary::zFront_type& boundary::
zFront () const
{
  return this->zFront_.get ();
}

boundary::zFront_type& boundary::
zFront ()
{
  return this->zFront_.get ();
}

void boundary::
zFront (const zFront_type& x)
{
  this->zFront_.set (x);
}

void boundary::
zFront (::std::unique_ptr< zFront_type > x)
{
  this->zFront_.set (std::move (x));
}

const boundary::zBehind_type& boundary::
zBehind () const
{
  return this->zBehind_.get ();
}

boundary::zBehind_type& boundary::
zBehind ()
{
  return this->zBehind_.get ();
}

void boundary::
zBehind (const zBehind_type& x)
{
  this->zBehind_.set (x);
}

void boundary::
zBehind (::std::unique_ptr< zBehind_type > x)
{
  this->zBehind_.set (std::move (x));
}


// import_checkpoint
// 

const import_checkpoint::file_path_type& import_checkpoint::
file_path () const
{
  return this->file_path_.get ();
}

import_checkpoint::file_path_type& import_checkpoint::
file_path ()
{
  return this->file_path_.get ();
}

void import_checkpoint::
file_path (const file_path_type& x)
{
  this->file_path_.set (x);
}

void import_checkpoint::
file_path (::std::unique_ptr< file_path_type > x)
{
  this->file_path_.set (std::move (x));
}


// bin_profile
// 

const bin_profile::iteration_type& bin_profile::
iteration () const
{
  return this->iteration_.get ();
}

bin_profile::iteration_type& bin_profile::
iteration ()
{
  return this->iteration_.get ();
}

void bin_profile::
iteration (const iteration_type& x)
{
  this->iteration_.set (x);
}

const bin_profile::bin_number_optional& bin_profile::
bin_number () const
{
  return this->bin_number_;
}

bin_profile::bin_number_optional& bin_profile::
bin_number ()
{
  return this->bin_number_;
}

void bin_profile::
bin_number (const bin_number_type& x)
{
  this->bin_number_.set (x);
}

void bin_profile::
bin_number (const bin_number_optional& x)
{
  this->bin_number_ = x;
}

const bin_profile::base_name_optional& bin_profile::
base_name () const
{
  return this->base_name_;
}

bin_profile::base_name_optional& bin_profile::
base_name ()
{
  return this->base_name_;
}

void bin_profile::
base_name (const base_name_type& x)
{
  this->base_name_.set (x);
}

void bin_profile::
base_name (const base_name_optional& x)
{
  this->base_name_ = x;
}

void bin_profile::
base_name (::std::unique_ptr< base_name_type > x)
{
  this->base_name_.set (std::move (x));
}


// particle
// 

const particle::coordinate_type& particle::
coordinate () const
{
  return this->coordinate_.get ();
}

particle::coordinate_type& particle::
coordinate ()
{
  return this->coordinate_.get ();
}

void particle::
coordinate (const coordinate_type& x)
{
  this->coordinate_.set (x);
}

void particle::
coordinate (::std::unique_ptr< coordinate_type > x)
{
  this->coordinate_.set (std::move (x));
}

const particle::velocity_type& particle::
velocity () const
{
  return this->velocity_.get ();
}

particle::velocity_type& particle::
velocity ()
{
  return this->velocity_.get ();
}

void particle::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void particle::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const particle::mass_type& particle::
mass () const
{
  return this->mass_.get ();
}

particle::mass_type& particle::
mass ()
{
  return this->mass_.get ();
}

void particle::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const particle::epsilon_optional& particle::
epsilon () const
{
  return this->epsilon_;
}

particle::epsilon_optional& particle::
epsilon ()
{
  return this->epsilon_;
}

void particle::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

void particle::
epsilon (const epsilon_optional& x)
{
  this->epsilon_ = x;
}

const particle::sigma_optional& particle::
sigma () const
{
  return this->sigma_;
}

particle::sigma_optional& particle::
sigma ()
{
  return this->sigma_;
}

void particle::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

void particle::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}

const particle::fixed_optional& particle::
fixed () const
{
  return this->fixed_;
}

particle::fixed_optional& particle::
fixed ()
{
  return this->fixed_;
}

void particle::
fixed (const fixed_type& x)
{
  this->fixed_.set (x);
}

void particle::
fixed (const fixed_optional& x)
{
  this->fixed_ = x;
}


// disc
// 

const disc::center_type& disc::
center () const
{
  return this->center_.get ();
}

disc::center_type& disc::
center ()
{
  return this->center_.get ();
}

void disc::
center (const center_type& x)
{
  this->center_.set (x);
}

void disc::
center (::std::unique_ptr< center_type > x)
{
  this->center_.set (std::move (x));
}

const disc::velocity_type& disc::
velocity () const
{
  return this->velocity_.get ();
}

disc::velocity_type& disc::
velocity ()
{
  return this->velocity_.get ();
}

void disc::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void disc::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const disc::mass_type& disc::
mass () const
{
  return this->mass_.get ();
}

disc::mass_type& disc::
mass ()
{
  return this->mass_.get ();
}

void disc::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const disc::meshWidth_type& disc::
meshWidth () const
{
  return this->meshWidth_.get ();
}

disc::meshWidth_type& disc::
meshWidth ()
{
  return this->meshWidth_.get ();
}

void disc::
meshWidth (const meshWidth_type& x)
{
  this->meshWidth_.set (x);
}

const disc::radius_type& disc::
radius () const
{
  return this->radius_.get ();
}

disc::radius_type& disc::
radius ()
{
  return this->radius_.get ();
}

void disc::
radius (const radius_type& x)
{
  this->radius_.set (x);
}

const disc::epsilon_optional& disc::
epsilon () const
{
  return this->epsilon_;
}

disc::epsilon_optional& disc::
epsilon ()
{
  return this->epsilon_;
}

void disc::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

void disc::
epsilon (const epsilon_optional& x)
{
  this->epsilon_ = x;
}

const disc::sigma_optional& disc::
sigma () const
{
  return this->sigma_;
}

disc::sigma_optional& disc::
sigma ()
{
  return this->sigma_;
}

void disc::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

void disc::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}

const disc::fixed_optional& disc::
fixed () const
{
  return this->fixed_;
}

disc::fixed_optional& disc::
fixed ()
{
  return this->fixed_;
}

void disc::
fixed (const fixed_type& x)
{
  this->fixed_.set (x);
}

void disc::
fixed (const fixed_optional& x)
{
  this->fixed_ = x;
}


// cuboid
// 

const cuboid::cornerCoordinates_type& cuboid::
cornerCoordinates () const
{
  return this->cornerCoordinates_.get ();
}

cuboid::cornerCoordinates_type& cuboid::
cornerCoordinates ()
{
  return this->cornerCoordinates_.get ();
}

void cuboid::
cornerCoordinates (const cornerCoordinates_type& x)
{
  this->cornerCoordinates_.set (x);
}

void cuboid::
cornerCoordinates (::std::unique_ptr< cornerCoordinates_type > x)
{
  this->cornerCoordinates_.set (std::move (x));
}

const cuboid::dimensions_type& cuboid::
dimensions () const
{
  return this->dimensions_.get ();
}

cuboid::dimensions_type& cuboid::
dimensions ()
{
  return this->dimensions_.get ();
}

void cuboid::
dimensions (const dimensions_type& x)
{
  this->dimensions_.set (x);
}

void cuboid::
dimensions (::std::unique_ptr< dimensions_type > x)
{
  this->dimensions_.set (std::move (x));
}

const cuboid::velocity_type& cuboid::
velocity () const
{
  return this->velocity_.get ();
}

cuboid::velocity_type& cuboid::
velocity ()
{
  return this->velocity_.get ();
}

void cuboid::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void cuboid::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const cuboid::meshWidth_type& cuboid::
meshWidth () const
{
  return this->meshWidth_.get ();
}

cuboid::meshWidth_type& cuboid::
meshWidth ()
{
  return this->meshWidth_.get ();
}

void cuboid::
meshWidth (const meshWidth_type& x)
{
  this->meshWidth_.set (x);
}

const cuboid::mass_type& cuboid::
mass () const
{
  return this->mass_.get ();
}

cuboid::mass_type& cuboid::
mass ()
{
  return this->mass_.get ();
}

void cuboid::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const cuboid::epsilon_optional& cuboid::
epsilon () const
{
  return this->epsilon_;
}

cuboid::epsilon_optional& cuboid::
epsilon ()
{
  return this->epsilon_;
}

void cuboid::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

void cuboid::
epsilon (const epsilon_optional& x)
{
  this->epsilon_ = x;
}

const cuboid::sigma_optional& cuboid::
sigma () const
{
  return this->sigma_;
}

cuboid::sigma_optional& cuboid::
sigma ()
{
  return this->sigma_;
}

void cuboid::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

void cuboid::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}

const cuboid::special_coords_sequence& cuboid::
special_coords () const
{
  return this->special_coords_;
}

cuboid::special_coords_sequence& cuboid::
special_coords ()
{
  return this->special_coords_;
}

void cuboid::
special_coords (const special_coords_sequence& s)
{
  this->special_coords_ = s;
}

const cuboid::fixed_optional& cuboid::
fixed () const
{
  return this->fixed_;
}

cuboid::fixed_optional& cuboid::
fixed ()
{
  return this->fixed_;
}

void cuboid::
fixed (const fixed_type& x)
{
  this->fixed_.set (x);
}

void cuboid::
fixed (const fixed_optional& x)
{
  this->fixed_ = x;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// vectorType
//

vectorType::
vectorType (const x_type& x,
            const y_type& y,
            const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

vectorType::
vectorType (const vectorType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

vectorType::
vectorType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void vectorType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

vectorType* vectorType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class vectorType (*this, f, c);
}

vectorType& vectorType::
operator= (const vectorType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

vectorType::
~vectorType ()
{
}

// simulation
//

simulation::
simulation (const clusters_type& clusters)
: ::xml_schema::type (),
  output_ (this),
  parameters_ (this),
  clusters_ (clusters, this),
  thermo_ (this),
  membraneArgs_ (this),
  parallelization_ (this)
{
}

simulation::
simulation (::std::unique_ptr< clusters_type > clusters)
: ::xml_schema::type (),
  output_ (this),
  parameters_ (this),
  clusters_ (std::move (clusters), this),
  thermo_ (this),
  membraneArgs_ (this),
  parallelization_ (this)
{
}

simulation::
simulation (const simulation& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  output_ (x.output_, f, this),
  parameters_ (x.parameters_, f, this),
  clusters_ (x.clusters_, f, this),
  thermo_ (x.thermo_, f, this),
  membraneArgs_ (x.membraneArgs_, f, this),
  parallelization_ (x.parallelization_, f, this)
{
}

simulation::
simulation (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  output_ (this),
  parameters_ (this),
  clusters_ (this),
  thermo_ (this),
  membraneArgs_ (this),
  parallelization_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void simulation::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // output
    //
    if (n.name () == "output" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< output_type > r (
        output_traits::create (i, f, this));

      if (!this->output_)
      {
        this->output_.set (::std::move (r));
        continue;
      }
    }

    // parameters
    //
    if (n.name () == "parameters" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< parameters_type > r (
        parameters_traits::create (i, f, this));

      if (!this->parameters_)
      {
        this->parameters_.set (::std::move (r));
        continue;
      }
    }

    // clusters
    //
    if (n.name () == "clusters" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< clusters_type > r (
        clusters_traits::create (i, f, this));

      if (!clusters_.present ())
      {
        this->clusters_.set (::std::move (r));
        continue;
      }
    }

    // thermo
    //
    if (n.name () == "thermo" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< thermo_type > r (
        thermo_traits::create (i, f, this));

      if (!this->thermo_)
      {
        this->thermo_.set (::std::move (r));
        continue;
      }
    }

    // membraneArgs
    //
    if (n.name () == "membraneArgs" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< membraneArgs_type > r (
        membraneArgs_traits::create (i, f, this));

      if (!this->membraneArgs_)
      {
        this->membraneArgs_.set (::std::move (r));
        continue;
      }
    }

    // parallelization
    //
    if (n.name () == "parallelization" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< parallelization_type > r (
        parallelization_traits::create (i, f, this));

      if (!this->parallelization_)
      {
        this->parallelization_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!clusters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "clusters",
      "");
  }
}

simulation* simulation::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation (*this, f, c);
}

simulation& simulation::
operator= (const simulation& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->output_ = x.output_;
    this->parameters_ = x.parameters_;
    this->clusters_ = x.clusters_;
    this->thermo_ = x.thermo_;
    this->membraneArgs_ = x.membraneArgs_;
    this->parallelization_ = x.parallelization_;
  }

  return *this;
}

simulation::
~simulation ()
{
}

// output
//

output::
output ()
: ::xml_schema::type (),
  writeFrequency_ (this),
  baseName_ (this),
  create_checkpoint_file_ (this)
{
}

output::
output (const output& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  writeFrequency_ (x.writeFrequency_, f, this),
  baseName_ (x.baseName_, f, this),
  create_checkpoint_file_ (x.create_checkpoint_file_, f, this)
{
}

output::
output (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  writeFrequency_ (this),
  baseName_ (this),
  create_checkpoint_file_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void output::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // writeFrequency
    //
    if (n.name () == "writeFrequency" && n.namespace_ ().empty ())
    {
      if (!this->writeFrequency_)
      {
        this->writeFrequency_.set (writeFrequency_traits::create (i, f, this));
        continue;
      }
    }

    // baseName
    //
    if (n.name () == "baseName" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< baseName_type > r (
        baseName_traits::create (i, f, this));

      if (!this->baseName_)
      {
        this->baseName_.set (::std::move (r));
        continue;
      }
    }

    // create_checkpoint_file
    //
    if (n.name () == "create_checkpoint_file" && n.namespace_ ().empty ())
    {
      if (!this->create_checkpoint_file_)
      {
        this->create_checkpoint_file_.set (create_checkpoint_file_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }
}

output* output::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class output (*this, f, c);
}

output& output::
operator= (const output& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->writeFrequency_ = x.writeFrequency_;
    this->baseName_ = x.baseName_;
    this->create_checkpoint_file_ = x.create_checkpoint_file_;
  }

  return *this;
}

output::
~output ()
{
}

// parameters
//

parameters::
parameters ()
: ::xml_schema::type (),
  delta_t_ (this),
  t_end_ (this),
  epsilon_ (this),
  sigma_ (this),
  t_start_ (this),
  averageVelocity_ (this),
  containerType_ (this),
  domainSize_ (this),
  cutoff_ (this),
  boundary_ (this),
  grav_ (this),
  import_checkpoint_ (this),
  bin_profile_ (this)
{
}

parameters::
parameters (const parameters& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  delta_t_ (x.delta_t_, f, this),
  t_end_ (x.t_end_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  t_start_ (x.t_start_, f, this),
  averageVelocity_ (x.averageVelocity_, f, this),
  containerType_ (x.containerType_, f, this),
  domainSize_ (x.domainSize_, f, this),
  cutoff_ (x.cutoff_, f, this),
  boundary_ (x.boundary_, f, this),
  grav_ (x.grav_, f, this),
  import_checkpoint_ (x.import_checkpoint_, f, this),
  bin_profile_ (x.bin_profile_, f, this)
{
}

parameters::
parameters (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  delta_t_ (this),
  t_end_ (this),
  epsilon_ (this),
  sigma_ (this),
  t_start_ (this),
  averageVelocity_ (this),
  containerType_ (this),
  domainSize_ (this),
  cutoff_ (this),
  boundary_ (this),
  grav_ (this),
  import_checkpoint_ (this),
  bin_profile_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void parameters::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // delta_t
    //
    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      if (!this->delta_t_)
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // t_end
    //
    if (n.name () == "t_end" && n.namespace_ ().empty ())
    {
      if (!this->t_end_)
      {
        this->t_end_.set (t_end_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!this->epsilon_)
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!this->sigma_)
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // t_start
    //
    if (n.name () == "t_start" && n.namespace_ ().empty ())
    {
      if (!this->t_start_)
      {
        this->t_start_.set (t_start_traits::create (i, f, this));
        continue;
      }
    }

    // averageVelocity
    //
    if (n.name () == "averageVelocity" && n.namespace_ ().empty ())
    {
      if (!this->averageVelocity_)
      {
        this->averageVelocity_.set (averageVelocity_traits::create (i, f, this));
        continue;
      }
    }

    // containerType
    //
    if (n.name () == "containerType" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< containerType_type > r (
        containerType_traits::create (i, f, this));

      if (!this->containerType_)
      {
        this->containerType_.set (::std::move (r));
        continue;
      }
    }

    // domainSize
    //
    if (n.name () == "domainSize" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< domainSize_type > r (
        domainSize_traits::create (i, f, this));

      if (!this->domainSize_)
      {
        this->domainSize_.set (::std::move (r));
        continue;
      }
    }

    // cutoff
    //
    if (n.name () == "cutoff" && n.namespace_ ().empty ())
    {
      if (!this->cutoff_)
      {
        this->cutoff_.set (cutoff_traits::create (i, f, this));
        continue;
      }
    }

    // boundary
    //
    if (n.name () == "boundary" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< boundary_type > r (
        boundary_traits::create (i, f, this));

      if (!this->boundary_)
      {
        this->boundary_.set (::std::move (r));
        continue;
      }
    }

    // grav
    //
    if (n.name () == "grav" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< grav_type > r (
        grav_traits::create (i, f, this));

      if (!this->grav_)
      {
        this->grav_.set (::std::move (r));
        continue;
      }
    }

    // import_checkpoint
    //
    if (n.name () == "import_checkpoint" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< import_checkpoint_type > r (
        import_checkpoint_traits::create (i, f, this));

      if (!this->import_checkpoint_)
      {
        this->import_checkpoint_.set (::std::move (r));
        continue;
      }
    }

    // bin_profile
    //
    if (n.name () == "bin_profile" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< bin_profile_type > r (
        bin_profile_traits::create (i, f, this));

      if (!this->bin_profile_)
      {
        this->bin_profile_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

parameters* parameters::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class parameters (*this, f, c);
}

parameters& parameters::
operator= (const parameters& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->delta_t_ = x.delta_t_;
    this->t_end_ = x.t_end_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->t_start_ = x.t_start_;
    this->averageVelocity_ = x.averageVelocity_;
    this->containerType_ = x.containerType_;
    this->domainSize_ = x.domainSize_;
    this->cutoff_ = x.cutoff_;
    this->boundary_ = x.boundary_;
    this->grav_ = x.grav_;
    this->import_checkpoint_ = x.import_checkpoint_;
    this->bin_profile_ = x.bin_profile_;
  }

  return *this;
}

parameters::
~parameters ()
{
}

// clusters
//

clusters::
clusters ()
: ::xml_schema::type (),
  particle_ (this),
  disc_ (this),
  cuboid_ (this)
{
}

clusters::
clusters (const clusters& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  particle_ (x.particle_, f, this),
  disc_ (x.disc_, f, this),
  cuboid_ (x.cuboid_, f, this)
{
}

clusters::
clusters (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  particle_ (this),
  disc_ (this),
  cuboid_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void clusters::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // particle
    //
    if (n.name () == "particle" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< particle_type > r (
        particle_traits::create (i, f, this));

      this->particle_.push_back (::std::move (r));
      continue;
    }

    // disc
    //
    if (n.name () == "disc" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< disc_type > r (
        disc_traits::create (i, f, this));

      this->disc_.push_back (::std::move (r));
      continue;
    }

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

clusters* clusters::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class clusters (*this, f, c);
}

clusters& clusters::
operator= (const clusters& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->particle_ = x.particle_;
    this->disc_ = x.disc_;
    this->cuboid_ = x.cuboid_;
  }

  return *this;
}

clusters::
~clusters ()
{
}

// thermo
//

thermo::
thermo (const init_T_type& init_T,
        const n_type& n)
: ::xml_schema::type (),
  version_ (this),
  init_T_ (init_T, this),
  n_ (n, this),
  target_ (this),
  maxStep_ (this)
{
}

thermo::
thermo (const thermo& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  version_ (x.version_, f, this),
  init_T_ (x.init_T_, f, this),
  n_ (x.n_, f, this),
  target_ (x.target_, f, this),
  maxStep_ (x.maxStep_, f, this)
{
}

thermo::
thermo (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  version_ (this),
  init_T_ (this),
  n_ (this),
  target_ (this),
  maxStep_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void thermo::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // version
    //
    if (n.name () == "version" && n.namespace_ ().empty ())
    {
      if (!this->version_)
      {
        this->version_.set (version_traits::create (i, f, this));
        continue;
      }
    }

    // init_T
    //
    if (n.name () == "init_T" && n.namespace_ ().empty ())
    {
      if (!init_T_.present ())
      {
        this->init_T_.set (init_T_traits::create (i, f, this));
        continue;
      }
    }

    // n
    //
    if (n.name () == "n" && n.namespace_ ().empty ())
    {
      if (!n_.present ())
      {
        this->n_.set (n_traits::create (i, f, this));
        continue;
      }
    }

    // target
    //
    if (n.name () == "target" && n.namespace_ ().empty ())
    {
      if (!this->target_)
      {
        this->target_.set (target_traits::create (i, f, this));
        continue;
      }
    }

    // maxStep
    //
    if (n.name () == "maxStep" && n.namespace_ ().empty ())
    {
      if (!this->maxStep_)
      {
        this->maxStep_.set (maxStep_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!init_T_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "init_T",
      "");
  }

  if (!n_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "n",
      "");
  }
}

thermo* thermo::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class thermo (*this, f, c);
}

thermo& thermo::
operator= (const thermo& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->version_ = x.version_;
    this->init_T_ = x.init_T_;
    this->n_ = x.n_;
    this->target_ = x.target_;
    this->maxStep_ = x.maxStep_;
  }

  return *this;
}

thermo::
~thermo ()
{
}

// membraneArgs
//

membraneArgs::
membraneArgs (const r0_type& r0,
              const k_type& k,
              const customForce_type& customForce)
: ::xml_schema::type (),
  r0_ (r0, this),
  k_ (k, this),
  customForce_ (customForce, this)
{
}

membraneArgs::
membraneArgs (const r0_type& r0,
              const k_type& k,
              ::std::unique_ptr< customForce_type > customForce)
: ::xml_schema::type (),
  r0_ (r0, this),
  k_ (k, this),
  customForce_ (std::move (customForce), this)
{
}

membraneArgs::
membraneArgs (const membraneArgs& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  r0_ (x.r0_, f, this),
  k_ (x.k_, f, this),
  customForce_ (x.customForce_, f, this)
{
}

membraneArgs::
membraneArgs (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  r0_ (this),
  k_ (this),
  customForce_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void membraneArgs::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // r0
    //
    if (n.name () == "r0" && n.namespace_ ().empty ())
    {
      if (!r0_.present ())
      {
        this->r0_.set (r0_traits::create (i, f, this));
        continue;
      }
    }

    // k
    //
    if (n.name () == "k" && n.namespace_ ().empty ())
    {
      if (!k_.present ())
      {
        this->k_.set (k_traits::create (i, f, this));
        continue;
      }
    }

    // customForce
    //
    if (n.name () == "customForce" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< customForce_type > r (
        customForce_traits::create (i, f, this));

      if (!customForce_.present ())
      {
        this->customForce_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!r0_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "r0",
      "");
  }

  if (!k_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "k",
      "");
  }

  if (!customForce_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "customForce",
      "");
  }
}

membraneArgs* membraneArgs::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class membraneArgs (*this, f, c);
}

membraneArgs& membraneArgs::
operator= (const membraneArgs& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->r0_ = x.r0_;
    this->k_ = x.k_;
    this->customForce_ = x.customForce_;
  }

  return *this;
}

membraneArgs::
~membraneArgs ()
{
}

// parallelization
//

parallelization::
parallelization (const strategy_type& strategy)
: ::xml_schema::type (),
  strategy_ (strategy, this),
  threadNumber_ (this)
{
}

parallelization::
parallelization (const parallelization& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  strategy_ (x.strategy_, f, this),
  threadNumber_ (x.threadNumber_, f, this)
{
}

parallelization::
parallelization (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  strategy_ (this),
  threadNumber_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void parallelization::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // strategy
    //
    if (n.name () == "strategy" && n.namespace_ ().empty ())
    {
      if (!strategy_.present ())
      {
        this->strategy_.set (strategy_traits::create (i, f, this));
        continue;
      }
    }

    // threadNumber
    //
    if (n.name () == "threadNumber" && n.namespace_ ().empty ())
    {
      if (!this->threadNumber_)
      {
        this->threadNumber_.set (threadNumber_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!strategy_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "strategy",
      "");
  }
}

parallelization* parallelization::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class parallelization (*this, f, c);
}

parallelization& parallelization::
operator= (const parallelization& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->strategy_ = x.strategy_;
    this->threadNumber_ = x.threadNumber_;
  }

  return *this;
}

parallelization::
~parallelization ()
{
}

// boundary
//

boundary::
boundary (const xTop_type& xTop,
          const xBottom_type& xBottom,
          const yLeft_type& yLeft,
          const yRight_type& yRight,
          const zFront_type& zFront,
          const zBehind_type& zBehind)
: ::xml_schema::type (),
  xTop_ (xTop, this),
  xBottom_ (xBottom, this),
  yLeft_ (yLeft, this),
  yRight_ (yRight, this),
  zFront_ (zFront, this),
  zBehind_ (zBehind, this)
{
}

boundary::
boundary (const boundary& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  xTop_ (x.xTop_, f, this),
  xBottom_ (x.xBottom_, f, this),
  yLeft_ (x.yLeft_, f, this),
  yRight_ (x.yRight_, f, this),
  zFront_ (x.zFront_, f, this),
  zBehind_ (x.zBehind_, f, this)
{
}

boundary::
boundary (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  xTop_ (this),
  xBottom_ (this),
  yLeft_ (this),
  yRight_ (this),
  zFront_ (this),
  zBehind_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void boundary::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // xTop
    //
    if (n.name () == "xTop" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< xTop_type > r (
        xTop_traits::create (i, f, this));

      if (!xTop_.present ())
      {
        this->xTop_.set (::std::move (r));
        continue;
      }
    }

    // xBottom
    //
    if (n.name () == "xBottom" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< xBottom_type > r (
        xBottom_traits::create (i, f, this));

      if (!xBottom_.present ())
      {
        this->xBottom_.set (::std::move (r));
        continue;
      }
    }

    // yLeft
    //
    if (n.name () == "yLeft" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< yLeft_type > r (
        yLeft_traits::create (i, f, this));

      if (!yLeft_.present ())
      {
        this->yLeft_.set (::std::move (r));
        continue;
      }
    }

    // yRight
    //
    if (n.name () == "yRight" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< yRight_type > r (
        yRight_traits::create (i, f, this));

      if (!yRight_.present ())
      {
        this->yRight_.set (::std::move (r));
        continue;
      }
    }

    // zFront
    //
    if (n.name () == "zFront" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< zFront_type > r (
        zFront_traits::create (i, f, this));

      if (!zFront_.present ())
      {
        this->zFront_.set (::std::move (r));
        continue;
      }
    }

    // zBehind
    //
    if (n.name () == "zBehind" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< zBehind_type > r (
        zBehind_traits::create (i, f, this));

      if (!zBehind_.present ())
      {
        this->zBehind_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!xTop_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "xTop",
      "");
  }

  if (!xBottom_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "xBottom",
      "");
  }

  if (!yLeft_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "yLeft",
      "");
  }

  if (!yRight_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "yRight",
      "");
  }

  if (!zFront_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "zFront",
      "");
  }

  if (!zBehind_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "zBehind",
      "");
  }
}

boundary* boundary::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class boundary (*this, f, c);
}

boundary& boundary::
operator= (const boundary& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->xTop_ = x.xTop_;
    this->xBottom_ = x.xBottom_;
    this->yLeft_ = x.yLeft_;
    this->yRight_ = x.yRight_;
    this->zFront_ = x.zFront_;
    this->zBehind_ = x.zBehind_;
  }

  return *this;
}

boundary::
~boundary ()
{
}

// import_checkpoint
//

import_checkpoint::
import_checkpoint (const file_path_type& file_path)
: ::xml_schema::type (),
  file_path_ (file_path, this)
{
}

import_checkpoint::
import_checkpoint (const import_checkpoint& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  file_path_ (x.file_path_, f, this)
{
}

import_checkpoint::
import_checkpoint (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  file_path_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void import_checkpoint::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // file_path
    //
    if (n.name () == "file_path" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< file_path_type > r (
        file_path_traits::create (i, f, this));

      if (!file_path_.present ())
      {
        this->file_path_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!file_path_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "file_path",
      "");
  }
}

import_checkpoint* import_checkpoint::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class import_checkpoint (*this, f, c);
}

import_checkpoint& import_checkpoint::
operator= (const import_checkpoint& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->file_path_ = x.file_path_;
  }

  return *this;
}

import_checkpoint::
~import_checkpoint ()
{
}

// bin_profile
//

bin_profile::
bin_profile (const iteration_type& iteration)
: ::xml_schema::type (),
  iteration_ (iteration, this),
  bin_number_ (this),
  base_name_ (this)
{
}

bin_profile::
bin_profile (const bin_profile& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  iteration_ (x.iteration_, f, this),
  bin_number_ (x.bin_number_, f, this),
  base_name_ (x.base_name_, f, this)
{
}

bin_profile::
bin_profile (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  iteration_ (this),
  bin_number_ (this),
  base_name_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void bin_profile::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // iteration
    //
    if (n.name () == "iteration" && n.namespace_ ().empty ())
    {
      if (!iteration_.present ())
      {
        this->iteration_.set (iteration_traits::create (i, f, this));
        continue;
      }
    }

    // bin_number
    //
    if (n.name () == "bin_number" && n.namespace_ ().empty ())
    {
      if (!this->bin_number_)
      {
        this->bin_number_.set (bin_number_traits::create (i, f, this));
        continue;
      }
    }

    // base_name
    //
    if (n.name () == "base_name" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< base_name_type > r (
        base_name_traits::create (i, f, this));

      if (!this->base_name_)
      {
        this->base_name_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!iteration_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "iteration",
      "");
  }
}

bin_profile* bin_profile::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bin_profile (*this, f, c);
}

bin_profile& bin_profile::
operator= (const bin_profile& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->iteration_ = x.iteration_;
    this->bin_number_ = x.bin_number_;
    this->base_name_ = x.base_name_;
  }

  return *this;
}

bin_profile::
~bin_profile ()
{
}

// particle
//

particle::
particle (const coordinate_type& coordinate,
          const velocity_type& velocity,
          const mass_type& mass)
: ::xml_schema::type (),
  coordinate_ (coordinate, this),
  velocity_ (velocity, this),
  mass_ (mass, this),
  epsilon_ (this),
  sigma_ (this),
  fixed_ (this)
{
}

particle::
particle (::std::unique_ptr< coordinate_type > coordinate,
          ::std::unique_ptr< velocity_type > velocity,
          const mass_type& mass)
: ::xml_schema::type (),
  coordinate_ (std::move (coordinate), this),
  velocity_ (std::move (velocity), this),
  mass_ (mass, this),
  epsilon_ (this),
  sigma_ (this),
  fixed_ (this)
{
}

particle::
particle (const particle& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  coordinate_ (x.coordinate_, f, this),
  velocity_ (x.velocity_, f, this),
  mass_ (x.mass_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  fixed_ (x.fixed_, f, this)
{
}

particle::
particle (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  coordinate_ (this),
  velocity_ (this),
  mass_ (this),
  epsilon_ (this),
  sigma_ (this),
  fixed_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void particle::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // coordinate
    //
    if (n.name () == "coordinate" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< coordinate_type > r (
        coordinate_traits::create (i, f, this));

      if (!coordinate_.present ())
      {
        this->coordinate_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!this->epsilon_)
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!this->sigma_)
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // fixed
    //
    if (n.name () == "fixed" && n.namespace_ ().empty ())
    {
      if (!this->fixed_)
      {
        this->fixed_.set (fixed_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!coordinate_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "coordinate",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }
}

particle* particle::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class particle (*this, f, c);
}

particle& particle::
operator= (const particle& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->coordinate_ = x.coordinate_;
    this->velocity_ = x.velocity_;
    this->mass_ = x.mass_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->fixed_ = x.fixed_;
  }

  return *this;
}

particle::
~particle ()
{
}

// disc
//

disc::
disc (const center_type& center,
      const velocity_type& velocity,
      const mass_type& mass,
      const meshWidth_type& meshWidth,
      const radius_type& radius)
: ::xml_schema::type (),
  center_ (center, this),
  velocity_ (velocity, this),
  mass_ (mass, this),
  meshWidth_ (meshWidth, this),
  radius_ (radius, this),
  epsilon_ (this),
  sigma_ (this),
  fixed_ (this)
{
}

disc::
disc (::std::unique_ptr< center_type > center,
      ::std::unique_ptr< velocity_type > velocity,
      const mass_type& mass,
      const meshWidth_type& meshWidth,
      const radius_type& radius)
: ::xml_schema::type (),
  center_ (std::move (center), this),
  velocity_ (std::move (velocity), this),
  mass_ (mass, this),
  meshWidth_ (meshWidth, this),
  radius_ (radius, this),
  epsilon_ (this),
  sigma_ (this),
  fixed_ (this)
{
}

disc::
disc (const disc& x,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  center_ (x.center_, f, this),
  velocity_ (x.velocity_, f, this),
  mass_ (x.mass_, f, this),
  meshWidth_ (x.meshWidth_, f, this),
  radius_ (x.radius_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  fixed_ (x.fixed_, f, this)
{
}

disc::
disc (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  center_ (this),
  velocity_ (this),
  mass_ (this),
  meshWidth_ (this),
  radius_ (this),
  epsilon_ (this),
  sigma_ (this),
  fixed_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void disc::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // center
    //
    if (n.name () == "center" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< center_type > r (
        center_traits::create (i, f, this));

      if (!center_.present ())
      {
        this->center_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // meshWidth
    //
    if (n.name () == "meshWidth" && n.namespace_ ().empty ())
    {
      if (!meshWidth_.present ())
      {
        this->meshWidth_.set (meshWidth_traits::create (i, f, this));
        continue;
      }
    }

    // radius
    //
    if (n.name () == "radius" && n.namespace_ ().empty ())
    {
      if (!radius_.present ())
      {
        this->radius_.set (radius_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!this->epsilon_)
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!this->sigma_)
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // fixed
    //
    if (n.name () == "fixed" && n.namespace_ ().empty ())
    {
      if (!this->fixed_)
      {
        this->fixed_.set (fixed_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!center_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "center",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!meshWidth_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "meshWidth",
      "");
  }

  if (!radius_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "radius",
      "");
  }
}

disc* disc::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class disc (*this, f, c);
}

disc& disc::
operator= (const disc& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->center_ = x.center_;
    this->velocity_ = x.velocity_;
    this->mass_ = x.mass_;
    this->meshWidth_ = x.meshWidth_;
    this->radius_ = x.radius_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->fixed_ = x.fixed_;
  }

  return *this;
}

disc::
~disc ()
{
}

// cuboid
//

cuboid::
cuboid (const cornerCoordinates_type& cornerCoordinates,
        const dimensions_type& dimensions,
        const velocity_type& velocity,
        const meshWidth_type& meshWidth,
        const mass_type& mass)
: ::xml_schema::type (),
  cornerCoordinates_ (cornerCoordinates, this),
  dimensions_ (dimensions, this),
  velocity_ (velocity, this),
  meshWidth_ (meshWidth, this),
  mass_ (mass, this),
  epsilon_ (this),
  sigma_ (this),
  special_coords_ (this),
  fixed_ (this)
{
}

cuboid::
cuboid (::std::unique_ptr< cornerCoordinates_type > cornerCoordinates,
        ::std::unique_ptr< dimensions_type > dimensions,
        ::std::unique_ptr< velocity_type > velocity,
        const meshWidth_type& meshWidth,
        const mass_type& mass)
: ::xml_schema::type (),
  cornerCoordinates_ (std::move (cornerCoordinates), this),
  dimensions_ (std::move (dimensions), this),
  velocity_ (std::move (velocity), this),
  meshWidth_ (meshWidth, this),
  mass_ (mass, this),
  epsilon_ (this),
  sigma_ (this),
  special_coords_ (this),
  fixed_ (this)
{
}

cuboid::
cuboid (const cuboid& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  cornerCoordinates_ (x.cornerCoordinates_, f, this),
  dimensions_ (x.dimensions_, f, this),
  velocity_ (x.velocity_, f, this),
  meshWidth_ (x.meshWidth_, f, this),
  mass_ (x.mass_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  special_coords_ (x.special_coords_, f, this),
  fixed_ (x.fixed_, f, this)
{
}

cuboid::
cuboid (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  cornerCoordinates_ (this),
  dimensions_ (this),
  velocity_ (this),
  meshWidth_ (this),
  mass_ (this),
  epsilon_ (this),
  sigma_ (this),
  special_coords_ (this),
  fixed_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void cuboid::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // cornerCoordinates
    //
    if (n.name () == "cornerCoordinates" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cornerCoordinates_type > r (
        cornerCoordinates_traits::create (i, f, this));

      if (!cornerCoordinates_.present ())
      {
        this->cornerCoordinates_.set (::std::move (r));
        continue;
      }
    }

    // dimensions
    //
    if (n.name () == "dimensions" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< dimensions_type > r (
        dimensions_traits::create (i, f, this));

      if (!dimensions_.present ())
      {
        this->dimensions_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // meshWidth
    //
    if (n.name () == "meshWidth" && n.namespace_ ().empty ())
    {
      if (!meshWidth_.present ())
      {
        this->meshWidth_.set (meshWidth_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!this->epsilon_)
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!this->sigma_)
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // special_coords
    //
    if (n.name () == "special_coords" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< special_coords_type > r (
        special_coords_traits::create (i, f, this));

      this->special_coords_.push_back (::std::move (r));
      continue;
    }

    // fixed
    //
    if (n.name () == "fixed" && n.namespace_ ().empty ())
    {
      if (!this->fixed_)
      {
        this->fixed_.set (fixed_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!cornerCoordinates_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "cornerCoordinates",
      "");
  }

  if (!dimensions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimensions",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!meshWidth_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "meshWidth",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }
}

cuboid* cuboid::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid (*this, f, c);
}

cuboid& cuboid::
operator= (const cuboid& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->cornerCoordinates_ = x.cornerCoordinates_;
    this->dimensions_ = x.dimensions_;
    this->velocity_ = x.velocity_;
    this->meshWidth_ = x.meshWidth_;
    this->mass_ = x.mass_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->special_coords_ = x.special_coords_;
    this->fixed_ = x.fixed_;
  }

  return *this;
}

cuboid::
~cuboid ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::simulation > (
      ::simulation_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

::std::unique_ptr< ::simulation >
simulation_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const vectorType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // x
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "x",
        e));

    s << ::xml_schema::as_double(i.x ());
  }

  // y
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "y",
        e));

    s << ::xml_schema::as_double(i.y ());
  }

  // z
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "z",
        e));

    s << ::xml_schema::as_double(i.z ());
  }
}

void
simulation_ (::std::ostream& o,
             const ::simulation& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
simulation_ (::std::ostream& o,
             const ::simulation& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation_ (::std::ostream& o,
             const ::simulation& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation_ (::xercesc::XMLFormatTarget& t,
             const ::simulation& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
simulation_ (::xercesc::XMLFormatTarget& t,
             const ::simulation& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation_ (::xercesc::XMLFormatTarget& t,
             const ::simulation& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation_ (::xercesc::DOMDocument& d,
             const ::simulation& s,
             ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "simulation",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
simulation_ (const ::simulation& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "simulation",
      "",
      m, f));

  ::simulation_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const simulation& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // output
  //
  if (i.output ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "output",
        e));

    s << *i.output ();
  }

  // parameters
  //
  if (i.parameters ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parameters",
        e));

    s << *i.parameters ();
  }

  // clusters
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "clusters",
        e));

    s << i.clusters ();
  }

  // thermo
  //
  if (i.thermo ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "thermo",
        e));

    s << *i.thermo ();
  }

  // membraneArgs
  //
  if (i.membraneArgs ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "membraneArgs",
        e));

    s << *i.membraneArgs ();
  }

  // parallelization
  //
  if (i.parallelization ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parallelization",
        e));

    s << *i.parallelization ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const output& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // writeFrequency
  //
  if (i.writeFrequency ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "writeFrequency",
        e));

    s << *i.writeFrequency ();
  }

  // baseName
  //
  if (i.baseName ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "baseName",
        e));

    s << *i.baseName ();
  }

  // create_checkpoint_file
  //
  if (i.create_checkpoint_file ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "create_checkpoint_file",
        e));

    s << *i.create_checkpoint_file ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const parameters& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // delta_t
  //
  if (i.delta_t ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "delta_t",
        e));

    s << ::xml_schema::as_double(*i.delta_t ());
  }

  // t_end
  //
  if (i.t_end ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "t_end",
        e));

    s << ::xml_schema::as_double(*i.t_end ());
  }

  // epsilon
  //
  if (i.epsilon ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "epsilon",
        e));

    s << ::xml_schema::as_double(*i.epsilon ());
  }

  // sigma
  //
  if (i.sigma ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "sigma",
        e));

    s << ::xml_schema::as_double(*i.sigma ());
  }

  // t_start
  //
  if (i.t_start ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "t_start",
        e));

    s << ::xml_schema::as_double(*i.t_start ());
  }

  // averageVelocity
  //
  if (i.averageVelocity ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "averageVelocity",
        e));

    s << ::xml_schema::as_double(*i.averageVelocity ());
  }

  // containerType
  //
  if (i.containerType ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "containerType",
        e));

    s << *i.containerType ();
  }

  // domainSize
  //
  if (i.domainSize ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "domainSize",
        e));

    s << *i.domainSize ();
  }

  // cutoff
  //
  if (i.cutoff ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "cutoff",
        e));

    s << ::xml_schema::as_double(*i.cutoff ());
  }

  // boundary
  //
  if (i.boundary ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "boundary",
        e));

    s << *i.boundary ();
  }

  // grav
  //
  if (i.grav ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "grav",
        e));

    s << *i.grav ();
  }

  // import_checkpoint
  //
  if (i.import_checkpoint ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "import_checkpoint",
        e));

    s << *i.import_checkpoint ();
  }

  // bin_profile
  //
  if (i.bin_profile ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bin_profile",
        e));

    s << *i.bin_profile ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const clusters& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // particle
  //
  for (clusters::particle_const_iterator
       b (i.particle ().begin ()), n (i.particle ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "particle",
        e));

    s << *b;
  }

  // disc
  //
  for (clusters::disc_const_iterator
       b (i.disc ().begin ()), n (i.disc ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "disc",
        e));

    s << *b;
  }

  // cuboid
  //
  for (clusters::cuboid_const_iterator
       b (i.cuboid ().begin ()), n (i.cuboid ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "cuboid",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const thermo& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // version
  //
  if (i.version ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "version",
        e));

    s << *i.version ();
  }

  // init_T
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "init_T",
        e));

    s << ::xml_schema::as_double(i.init_T ());
  }

  // n
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "n",
        e));

    s << ::xml_schema::as_double(i.n ());
  }

  // target
  //
  if (i.target ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "target",
        e));

    s << ::xml_schema::as_double(*i.target ());
  }

  // maxStep
  //
  if (i.maxStep ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "maxStep",
        e));

    s << ::xml_schema::as_double(*i.maxStep ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const membraneArgs& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // r0
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "r0",
        e));

    s << ::xml_schema::as_double(i.r0 ());
  }

  // k
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "k",
        e));

    s << ::xml_schema::as_double(i.k ());
  }

  // customForce
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "customForce",
        e));

    s << i.customForce ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const parallelization& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // strategy
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "strategy",
        e));

    s << i.strategy ();
  }

  // threadNumber
  //
  if (i.threadNumber ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "threadNumber",
        e));

    s << *i.threadNumber ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const boundary& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // xTop
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "xTop",
        e));

    s << i.xTop ();
  }

  // xBottom
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "xBottom",
        e));

    s << i.xBottom ();
  }

  // yLeft
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "yLeft",
        e));

    s << i.yLeft ();
  }

  // yRight
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "yRight",
        e));

    s << i.yRight ();
  }

  // zFront
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "zFront",
        e));

    s << i.zFront ();
  }

  // zBehind
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "zBehind",
        e));

    s << i.zBehind ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const import_checkpoint& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // file_path
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "file_path",
        e));

    s << i.file_path ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bin_profile& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // iteration
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "iteration",
        e));

    s << i.iteration ();
  }

  // bin_number
  //
  if (i.bin_number ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bin_number",
        e));

    s << *i.bin_number ();
  }

  // base_name
  //
  if (i.base_name ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "base_name",
        e));

    s << *i.base_name ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const particle& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // coordinate
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "coordinate",
        e));

    s << i.coordinate ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // mass
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mass",
        e));

    s << ::xml_schema::as_double(i.mass ());
  }

  // epsilon
  //
  if (i.epsilon ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "epsilon",
        e));

    s << ::xml_schema::as_double(*i.epsilon ());
  }

  // sigma
  //
  if (i.sigma ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "sigma",
        e));

    s << ::xml_schema::as_double(*i.sigma ());
  }

  // fixed
  //
  if (i.fixed ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "fixed",
        e));

    s << *i.fixed ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const disc& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // center
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "center",
        e));

    s << i.center ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // mass
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mass",
        e));

    s << ::xml_schema::as_double(i.mass ());
  }

  // meshWidth
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "meshWidth",
        e));

    s << ::xml_schema::as_double(i.meshWidth ());
  }

  // radius
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "radius",
        e));

    s << ::xml_schema::as_double(i.radius ());
  }

  // epsilon
  //
  if (i.epsilon ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "epsilon",
        e));

    s << ::xml_schema::as_double(*i.epsilon ());
  }

  // sigma
  //
  if (i.sigma ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "sigma",
        e));

    s << ::xml_schema::as_double(*i.sigma ());
  }

  // fixed
  //
  if (i.fixed ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "fixed",
        e));

    s << *i.fixed ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const cuboid& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // cornerCoordinates
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "cornerCoordinates",
        e));

    s << i.cornerCoordinates ();
  }

  // dimensions
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dimensions",
        e));

    s << i.dimensions ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // meshWidth
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "meshWidth",
        e));

    s << ::xml_schema::as_double(i.meshWidth ());
  }

  // mass
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mass",
        e));

    s << ::xml_schema::as_double(i.mass ());
  }

  // epsilon
  //
  if (i.epsilon ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "epsilon",
        e));

    s << ::xml_schema::as_double(*i.epsilon ());
  }

  // sigma
  //
  if (i.sigma ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "sigma",
        e));

    s << ::xml_schema::as_double(*i.sigma ());
  }

  // special_coords
  //
  for (cuboid::special_coords_const_iterator
       b (i.special_coords ().begin ()), n (i.special_coords ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "special_coords",
        e));

    s << *b;
  }

  // fixed
  //
  if (i.fixed ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "fixed",
        e));

    s << *i.fixed ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

