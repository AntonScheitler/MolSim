// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simulation.h"

// vectorType
// 

const vectorType::x_type& vectorType::
x () const
{
  return this->x_.get ();
}

vectorType::x_type& vectorType::
x ()
{
  return this->x_.get ();
}

void vectorType::
x (const x_type& x)
{
  this->x_.set (x);
}

const vectorType::y_type& vectorType::
y () const
{
  return this->y_.get ();
}

vectorType::y_type& vectorType::
y ()
{
  return this->y_.get ();
}

void vectorType::
y (const y_type& x)
{
  this->y_.set (x);
}

const vectorType::z_type& vectorType::
z () const
{
  return this->z_.get ();
}

vectorType::z_type& vectorType::
z ()
{
  return this->z_.get ();
}

void vectorType::
z (const z_type& x)
{
  this->z_.set (x);
}


// simulation
// 

const simulation::parameters_optional& simulation::
parameters () const
{
  return this->parameters_;
}

simulation::parameters_optional& simulation::
parameters ()
{
  return this->parameters_;
}

void simulation::
parameters (const parameters_type& x)
{
  this->parameters_.set (x);
}

void simulation::
parameters (const parameters_optional& x)
{
  this->parameters_ = x;
}

void simulation::
parameters (::std::unique_ptr< parameters_type > x)
{
  this->parameters_.set (std::move (x));
}

const simulation::clusters_type& simulation::
clusters () const
{
  return this->clusters_.get ();
}

simulation::clusters_type& simulation::
clusters ()
{
  return this->clusters_.get ();
}

void simulation::
clusters (const clusters_type& x)
{
  this->clusters_.set (x);
}

void simulation::
clusters (::std::unique_ptr< clusters_type > x)
{
  this->clusters_.set (std::move (x));
}


// parameters
// 

const parameters::delta_t_optional& parameters::
delta_t () const
{
  return this->delta_t_;
}

parameters::delta_t_optional& parameters::
delta_t ()
{
  return this->delta_t_;
}

void parameters::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

void parameters::
delta_t (const delta_t_optional& x)
{
  this->delta_t_ = x;
}

const parameters::t_end_optional& parameters::
t_end () const
{
  return this->t_end_;
}

parameters::t_end_optional& parameters::
t_end ()
{
  return this->t_end_;
}

void parameters::
t_end (const t_end_type& x)
{
  this->t_end_.set (x);
}

void parameters::
t_end (const t_end_optional& x)
{
  this->t_end_ = x;
}

const parameters::epsilon_optional& parameters::
epsilon () const
{
  return this->epsilon_;
}

parameters::epsilon_optional& parameters::
epsilon ()
{
  return this->epsilon_;
}

void parameters::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

void parameters::
epsilon (const epsilon_optional& x)
{
  this->epsilon_ = x;
}

const parameters::sigma_optional& parameters::
sigma () const
{
  return this->sigma_;
}

parameters::sigma_optional& parameters::
sigma ()
{
  return this->sigma_;
}

void parameters::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

void parameters::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}

const parameters::t_start_optional& parameters::
t_start () const
{
  return this->t_start_;
}

parameters::t_start_optional& parameters::
t_start ()
{
  return this->t_start_;
}

void parameters::
t_start (const t_start_type& x)
{
  this->t_start_.set (x);
}

void parameters::
t_start (const t_start_optional& x)
{
  this->t_start_ = x;
}


// clusters
// 

const clusters::particle_sequence& clusters::
particle () const
{
  return this->particle_;
}

clusters::particle_sequence& clusters::
particle ()
{
  return this->particle_;
}

void clusters::
particle (const particle_sequence& s)
{
  this->particle_ = s;
}

const clusters::disc_sequence& clusters::
disc () const
{
  return this->disc_;
}

clusters::disc_sequence& clusters::
disc ()
{
  return this->disc_;
}

void clusters::
disc (const disc_sequence& s)
{
  this->disc_ = s;
}

const clusters::cuboid_sequence& clusters::
cuboid () const
{
  return this->cuboid_;
}

clusters::cuboid_sequence& clusters::
cuboid ()
{
  return this->cuboid_;
}

void clusters::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}


// particle
// 

const particle::coordinate_type& particle::
coordinate () const
{
  return this->coordinate_.get ();
}

particle::coordinate_type& particle::
coordinate ()
{
  return this->coordinate_.get ();
}

void particle::
coordinate (const coordinate_type& x)
{
  this->coordinate_.set (x);
}

void particle::
coordinate (::std::unique_ptr< coordinate_type > x)
{
  this->coordinate_.set (std::move (x));
}

const particle::velocity_type& particle::
velocity () const
{
  return this->velocity_.get ();
}

particle::velocity_type& particle::
velocity ()
{
  return this->velocity_.get ();
}

void particle::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void particle::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const particle::mass_type& particle::
mass () const
{
  return this->mass_.get ();
}

particle::mass_type& particle::
mass ()
{
  return this->mass_.get ();
}

void particle::
mass (const mass_type& x)
{
  this->mass_.set (x);
}


// disc
// 

const disc::center_type& disc::
center () const
{
  return this->center_.get ();
}

disc::center_type& disc::
center ()
{
  return this->center_.get ();
}

void disc::
center (const center_type& x)
{
  this->center_.set (x);
}

void disc::
center (::std::unique_ptr< center_type > x)
{
  this->center_.set (std::move (x));
}

const disc::velocity_type& disc::
velocity () const
{
  return this->velocity_.get ();
}

disc::velocity_type& disc::
velocity ()
{
  return this->velocity_.get ();
}

void disc::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void disc::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const disc::mass_type& disc::
mass () const
{
  return this->mass_.get ();
}

disc::mass_type& disc::
mass ()
{
  return this->mass_.get ();
}

void disc::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const disc::meshWidth_type& disc::
meshWidth () const
{
  return this->meshWidth_.get ();
}

disc::meshWidth_type& disc::
meshWidth ()
{
  return this->meshWidth_.get ();
}

void disc::
meshWidth (const meshWidth_type& x)
{
  this->meshWidth_.set (x);
}

const disc::radius_type& disc::
radius () const
{
  return this->radius_.get ();
}

disc::radius_type& disc::
radius ()
{
  return this->radius_.get ();
}

void disc::
radius (const radius_type& x)
{
  this->radius_.set (x);
}


// cuboid
// 

const cuboid::cornerCoordinates_type& cuboid::
cornerCoordinates () const
{
  return this->cornerCoordinates_.get ();
}

cuboid::cornerCoordinates_type& cuboid::
cornerCoordinates ()
{
  return this->cornerCoordinates_.get ();
}

void cuboid::
cornerCoordinates (const cornerCoordinates_type& x)
{
  this->cornerCoordinates_.set (x);
}

void cuboid::
cornerCoordinates (::std::unique_ptr< cornerCoordinates_type > x)
{
  this->cornerCoordinates_.set (std::move (x));
}

const cuboid::dimensions_type& cuboid::
dimensions () const
{
  return this->dimensions_.get ();
}

cuboid::dimensions_type& cuboid::
dimensions ()
{
  return this->dimensions_.get ();
}

void cuboid::
dimensions (const dimensions_type& x)
{
  this->dimensions_.set (x);
}

void cuboid::
dimensions (::std::unique_ptr< dimensions_type > x)
{
  this->dimensions_.set (std::move (x));
}

const cuboid::velocity_type& cuboid::
velocity () const
{
  return this->velocity_.get ();
}

cuboid::velocity_type& cuboid::
velocity ()
{
  return this->velocity_.get ();
}

void cuboid::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void cuboid::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const cuboid::meshWidth_type& cuboid::
meshWidth () const
{
  return this->meshWidth_.get ();
}

cuboid::meshWidth_type& cuboid::
meshWidth ()
{
  return this->meshWidth_.get ();
}

void cuboid::
meshWidth (const meshWidth_type& x)
{
  this->meshWidth_.set (x);
}

const cuboid::mass_type& cuboid::
mass () const
{
  return this->mass_.get ();
}

cuboid::mass_type& cuboid::
mass ()
{
  return this->mass_.get ();
}

void cuboid::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const cuboid::brownianMotion_type& cuboid::
brownianMotion () const
{
  return this->brownianMotion_.get ();
}

cuboid::brownianMotion_type& cuboid::
brownianMotion ()
{
  return this->brownianMotion_.get ();
}

void cuboid::
brownianMotion (const brownianMotion_type& x)
{
  this->brownianMotion_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// vectorType
//

vectorType::
vectorType (const x_type& x,
            const y_type& y,
            const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

vectorType::
vectorType (const vectorType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

vectorType::
vectorType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void vectorType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

vectorType* vectorType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class vectorType (*this, f, c);
}

vectorType& vectorType::
operator= (const vectorType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

vectorType::
~vectorType ()
{
}

// simulation
//

simulation::
simulation (const clusters_type& clusters)
: ::xml_schema::type (),
  parameters_ (this),
  clusters_ (clusters, this)
{
}

simulation::
simulation (::std::unique_ptr< clusters_type > clusters)
: ::xml_schema::type (),
  parameters_ (this),
  clusters_ (std::move (clusters), this)
{
}

simulation::
simulation (const simulation& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  parameters_ (x.parameters_, f, this),
  clusters_ (x.clusters_, f, this)
{
}

simulation::
simulation (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  parameters_ (this),
  clusters_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void simulation::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // parameters
    //
    if (n.name () == "parameters" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< parameters_type > r (
        parameters_traits::create (i, f, this));

      if (!this->parameters_)
      {
        this->parameters_.set (::std::move (r));
        continue;
      }
    }

    // clusters
    //
    if (n.name () == "clusters" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< clusters_type > r (
        clusters_traits::create (i, f, this));

      if (!clusters_.present ())
      {
        this->clusters_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!clusters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "clusters",
      "");
  }
}

simulation* simulation::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation (*this, f, c);
}

simulation& simulation::
operator= (const simulation& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->parameters_ = x.parameters_;
    this->clusters_ = x.clusters_;
  }

  return *this;
}

simulation::
~simulation ()
{
}

// parameters
//

parameters::
parameters ()
: ::xml_schema::type (),
  delta_t_ (this),
  t_end_ (this),
  epsilon_ (this),
  sigma_ (this),
  t_start_ (this)
{
}

parameters::
parameters (const parameters& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  delta_t_ (x.delta_t_, f, this),
  t_end_ (x.t_end_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  t_start_ (x.t_start_, f, this)
{
}

parameters::
parameters (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  delta_t_ (this),
  t_end_ (this),
  epsilon_ (this),
  sigma_ (this),
  t_start_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void parameters::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // delta_t
    //
    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      if (!this->delta_t_)
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // t_end
    //
    if (n.name () == "t_end" && n.namespace_ ().empty ())
    {
      if (!this->t_end_)
      {
        this->t_end_.set (t_end_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!this->epsilon_)
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!this->sigma_)
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // t_start
    //
    if (n.name () == "t_start" && n.namespace_ ().empty ())
    {
      if (!this->t_start_)
      {
        this->t_start_.set (t_start_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }
}

parameters* parameters::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class parameters (*this, f, c);
}

parameters& parameters::
operator= (const parameters& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->delta_t_ = x.delta_t_;
    this->t_end_ = x.t_end_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->t_start_ = x.t_start_;
  }

  return *this;
}

parameters::
~parameters ()
{
}

// clusters
//

clusters::
clusters ()
: ::xml_schema::type (),
  particle_ (this),
  disc_ (this),
  cuboid_ (this)
{
}

clusters::
clusters (const clusters& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  particle_ (x.particle_, f, this),
  disc_ (x.disc_, f, this),
  cuboid_ (x.cuboid_, f, this)
{
}

clusters::
clusters (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  particle_ (this),
  disc_ (this),
  cuboid_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void clusters::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // particle
    //
    if (n.name () == "particle" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< particle_type > r (
        particle_traits::create (i, f, this));

      this->particle_.push_back (::std::move (r));
      continue;
    }

    // disc
    //
    if (n.name () == "disc" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< disc_type > r (
        disc_traits::create (i, f, this));

      this->disc_.push_back (::std::move (r));
      continue;
    }

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

clusters* clusters::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class clusters (*this, f, c);
}

clusters& clusters::
operator= (const clusters& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->particle_ = x.particle_;
    this->disc_ = x.disc_;
    this->cuboid_ = x.cuboid_;
  }

  return *this;
}

clusters::
~clusters ()
{
}

// particle
//

particle::
particle (const coordinate_type& coordinate,
          const velocity_type& velocity,
          const mass_type& mass)
: ::xml_schema::type (),
  coordinate_ (coordinate, this),
  velocity_ (velocity, this),
  mass_ (mass, this)
{
}

particle::
particle (::std::unique_ptr< coordinate_type > coordinate,
          ::std::unique_ptr< velocity_type > velocity,
          const mass_type& mass)
: ::xml_schema::type (),
  coordinate_ (std::move (coordinate), this),
  velocity_ (std::move (velocity), this),
  mass_ (mass, this)
{
}

particle::
particle (const particle& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  coordinate_ (x.coordinate_, f, this),
  velocity_ (x.velocity_, f, this),
  mass_ (x.mass_, f, this)
{
}

particle::
particle (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  coordinate_ (this),
  velocity_ (this),
  mass_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void particle::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // coordinate
    //
    if (n.name () == "coordinate" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< coordinate_type > r (
        coordinate_traits::create (i, f, this));

      if (!coordinate_.present ())
      {
        this->coordinate_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!coordinate_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "coordinate",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }
}

particle* particle::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class particle (*this, f, c);
}

particle& particle::
operator= (const particle& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->coordinate_ = x.coordinate_;
    this->velocity_ = x.velocity_;
    this->mass_ = x.mass_;
  }

  return *this;
}

particle::
~particle ()
{
}

// disc
//

disc::
disc (const center_type& center,
      const velocity_type& velocity,
      const mass_type& mass,
      const meshWidth_type& meshWidth,
      const radius_type& radius)
: ::xml_schema::type (),
  center_ (center, this),
  velocity_ (velocity, this),
  mass_ (mass, this),
  meshWidth_ (meshWidth, this),
  radius_ (radius, this)
{
}

disc::
disc (::std::unique_ptr< center_type > center,
      ::std::unique_ptr< velocity_type > velocity,
      const mass_type& mass,
      const meshWidth_type& meshWidth,
      const radius_type& radius)
: ::xml_schema::type (),
  center_ (std::move (center), this),
  velocity_ (std::move (velocity), this),
  mass_ (mass, this),
  meshWidth_ (meshWidth, this),
  radius_ (radius, this)
{
}

disc::
disc (const disc& x,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  center_ (x.center_, f, this),
  velocity_ (x.velocity_, f, this),
  mass_ (x.mass_, f, this),
  meshWidth_ (x.meshWidth_, f, this),
  radius_ (x.radius_, f, this)
{
}

disc::
disc (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  center_ (this),
  velocity_ (this),
  mass_ (this),
  meshWidth_ (this),
  radius_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void disc::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // center
    //
    if (n.name () == "center" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< center_type > r (
        center_traits::create (i, f, this));

      if (!center_.present ())
      {
        this->center_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // meshWidth
    //
    if (n.name () == "meshWidth" && n.namespace_ ().empty ())
    {
      if (!meshWidth_.present ())
      {
        this->meshWidth_.set (meshWidth_traits::create (i, f, this));
        continue;
      }
    }

    // radius
    //
    if (n.name () == "radius" && n.namespace_ ().empty ())
    {
      if (!radius_.present ())
      {
        this->radius_.set (radius_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!center_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "center",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!meshWidth_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "meshWidth",
      "");
  }

  if (!radius_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "radius",
      "");
  }
}

disc* disc::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class disc (*this, f, c);
}

disc& disc::
operator= (const disc& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->center_ = x.center_;
    this->velocity_ = x.velocity_;
    this->mass_ = x.mass_;
    this->meshWidth_ = x.meshWidth_;
    this->radius_ = x.radius_;
  }

  return *this;
}

disc::
~disc ()
{
}

// cuboid
//

cuboid::
cuboid (const cornerCoordinates_type& cornerCoordinates,
        const dimensions_type& dimensions,
        const velocity_type& velocity,
        const meshWidth_type& meshWidth,
        const mass_type& mass,
        const brownianMotion_type& brownianMotion)
: ::xml_schema::type (),
  cornerCoordinates_ (cornerCoordinates, this),
  dimensions_ (dimensions, this),
  velocity_ (velocity, this),
  meshWidth_ (meshWidth, this),
  mass_ (mass, this),
  brownianMotion_ (brownianMotion, this)
{
}

cuboid::
cuboid (::std::unique_ptr< cornerCoordinates_type > cornerCoordinates,
        ::std::unique_ptr< dimensions_type > dimensions,
        ::std::unique_ptr< velocity_type > velocity,
        const meshWidth_type& meshWidth,
        const mass_type& mass,
        const brownianMotion_type& brownianMotion)
: ::xml_schema::type (),
  cornerCoordinates_ (std::move (cornerCoordinates), this),
  dimensions_ (std::move (dimensions), this),
  velocity_ (std::move (velocity), this),
  meshWidth_ (meshWidth, this),
  mass_ (mass, this),
  brownianMotion_ (brownianMotion, this)
{
}

cuboid::
cuboid (const cuboid& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  cornerCoordinates_ (x.cornerCoordinates_, f, this),
  dimensions_ (x.dimensions_, f, this),
  velocity_ (x.velocity_, f, this),
  meshWidth_ (x.meshWidth_, f, this),
  mass_ (x.mass_, f, this),
  brownianMotion_ (x.brownianMotion_, f, this)
{
}

cuboid::
cuboid (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  cornerCoordinates_ (this),
  dimensions_ (this),
  velocity_ (this),
  meshWidth_ (this),
  mass_ (this),
  brownianMotion_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void cuboid::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // cornerCoordinates
    //
    if (n.name () == "cornerCoordinates" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cornerCoordinates_type > r (
        cornerCoordinates_traits::create (i, f, this));

      if (!cornerCoordinates_.present ())
      {
        this->cornerCoordinates_.set (::std::move (r));
        continue;
      }
    }

    // dimensions
    //
    if (n.name () == "dimensions" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< dimensions_type > r (
        dimensions_traits::create (i, f, this));

      if (!dimensions_.present ())
      {
        this->dimensions_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // meshWidth
    //
    if (n.name () == "meshWidth" && n.namespace_ ().empty ())
    {
      if (!meshWidth_.present ())
      {
        this->meshWidth_.set (meshWidth_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // brownianMotion
    //
    if (n.name () == "brownianMotion" && n.namespace_ ().empty ())
    {
      if (!brownianMotion_.present ())
      {
        this->brownianMotion_.set (brownianMotion_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!cornerCoordinates_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "cornerCoordinates",
      "");
  }

  if (!dimensions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimensions",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!meshWidth_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "meshWidth",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!brownianMotion_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "brownianMotion",
      "");
  }
}

cuboid* cuboid::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid (*this, f, c);
}

cuboid& cuboid::
operator= (const cuboid& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->cornerCoordinates_ = x.cornerCoordinates_;
    this->dimensions_ = x.dimensions_;
    this->velocity_ = x.velocity_;
    this->meshWidth_ = x.meshWidth_;
    this->mass_ = x.mass_;
    this->brownianMotion_ = x.brownianMotion_;
  }

  return *this;
}

cuboid::
~cuboid ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::simulation > (
      ::simulation_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

::std::unique_ptr< ::simulation >
simulation_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const vectorType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // x
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "x",
        e));

    s << ::xml_schema::as_double(i.x ());
  }

  // y
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "y",
        e));

    s << ::xml_schema::as_double(i.y ());
  }

  // z
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "z",
        e));

    s << ::xml_schema::as_double(i.z ());
  }
}

void
simulation_ (::std::ostream& o,
             const ::simulation& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
simulation_ (::std::ostream& o,
             const ::simulation& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation_ (::std::ostream& o,
             const ::simulation& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation_ (::xercesc::XMLFormatTarget& t,
             const ::simulation& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
simulation_ (::xercesc::XMLFormatTarget& t,
             const ::simulation& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation_ (::xercesc::XMLFormatTarget& t,
             const ::simulation& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation_ (::xercesc::DOMDocument& d,
             const ::simulation& s,
             ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "simulation",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
simulation_ (const ::simulation& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "simulation",
      "",
      m, f));

  ::simulation_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const simulation& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // parameters
  //
  if (i.parameters ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parameters",
        e));

    s << *i.parameters ();
  }

  // clusters
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "clusters",
        e));

    s << i.clusters ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const parameters& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // delta_t
  //
  if (i.delta_t ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "delta_t",
        e));

    s << ::xml_schema::as_double(*i.delta_t ());
  }

  // t_end
  //
  if (i.t_end ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "t_end",
        e));

    s << ::xml_schema::as_double(*i.t_end ());
  }

  // epsilon
  //
  if (i.epsilon ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "epsilon",
        e));

    s << ::xml_schema::as_double(*i.epsilon ());
  }

  // sigma
  //
  if (i.sigma ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "sigma",
        e));

    s << ::xml_schema::as_double(*i.sigma ());
  }

  // t_start
  //
  if (i.t_start ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "t_start",
        e));

    s << ::xml_schema::as_double(*i.t_start ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const clusters& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // particle
  //
  for (clusters::particle_const_iterator
       b (i.particle ().begin ()), n (i.particle ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "particle",
        e));

    s << *b;
  }

  // disc
  //
  for (clusters::disc_const_iterator
       b (i.disc ().begin ()), n (i.disc ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "disc",
        e));

    s << *b;
  }

  // cuboid
  //
  for (clusters::cuboid_const_iterator
       b (i.cuboid ().begin ()), n (i.cuboid ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "cuboid",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const particle& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // coordinate
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "coordinate",
        e));

    s << i.coordinate ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // mass
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mass",
        e));

    s << ::xml_schema::as_double(i.mass ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const disc& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // center
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "center",
        e));

    s << i.center ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // mass
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mass",
        e));

    s << ::xml_schema::as_double(i.mass ());
  }

  // meshWidth
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "meshWidth",
        e));

    s << ::xml_schema::as_double(i.meshWidth ());
  }

  // radius
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "radius",
        e));

    s << ::xml_schema::as_double(i.radius ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const cuboid& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // cornerCoordinates
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "cornerCoordinates",
        e));

    s << i.cornerCoordinates ();
  }

  // dimensions
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dimensions",
        e));

    s << i.dimensions ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // meshWidth
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "meshWidth",
        e));

    s << ::xml_schema::as_double(i.meshWidth ());
  }

  // mass
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mass",
        e));

    s << ::xml_schema::as_double(i.mass ());
  }

  // brownianMotion
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "brownianMotion",
        e));

    s << ::xml_schema::as_double(i.brownianMotion ());
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

